[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Course Description",
    "section": "",
    "text": "This one-week intensive graduate-level course explores the intriguing intersection of climate change, epigenetics, and marine invertebrate physiology, with a significant emphasis on the application of functional genomics. The course aims to highlight the substantial yet often overlooked role of marine invertebrates in coastal ecosystems, underlining their ecological significance and their responses to climate change at an epigenetic level.\nThe course starts by establishing a strong foundational understanding of epigenetics, climate change, and marine invertebrate physiology. Following this, students will delve into the intricate role of functional genomics in understanding these connections. Real-world examples will be extensively used to discuss how changes in climate directly and indirectly lead to alterations in the epigenetic mechanisms of various coastal marine invertebrates.\nBy the end of the course, students should have a comprehensive understanding of how climate change can influence the epigenetics and physiology of coastal marine invertebrates and the potential broader implications for marine ecosystems. The course is suitable for students with a basic understanding of genetics and climate science, although students from all disciplines are welcome as the course starts from foundational principles.\nThrough a mix of lectures, discussions, and interactive case studies, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology."
  },
  {
    "objectID": "index.html#methodology",
    "href": "index.html#methodology",
    "title": "Course Description",
    "section": "Methodology:",
    "text": "Methodology:\nThrough a mix of lectures, discussions, and interactive data analysis, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology. The general format will be lecture in the morning and interactive data analysis in the afternoon. The latter will primarily involve using R and bash."
  },
  {
    "objectID": "index.html#bibliography",
    "href": "index.html#bibliography",
    "title": "Course Description",
    "section": "Bibliography:",
    "text": "Bibliography:\nCrandall, Grace, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma Timmins-Schiffman, and Steven Roberts. 2022. “Proteomic Response of Early Juvenile Pacific Oysters (Crassostrea Gigas) to Temperature.” PeerJ 10 (October): e14158. https://doi.org/10.7717/peerj.14158.\nCrandall, Grace, Pamela C. Jensen, Samuel J. White, and Steven Roberts. 2022. “Characterization of the Gene Repertoire and Environmentally Driven Expression Patterns in Tanner Crab (Chionoecetes Bairdi).” Marine Biotechnology 24 (1): 216–25. https://doi.org/10.1007/s10126–022–10100–8.\nDang, Xin, Yong-Kian Lim, Yang Li, Steven B. Roberts, Li Li, and Vengatesen Thiyagarajan. 2023. “Epigenetic-Associated Phenotypic Plasticity of the Ocean Acidification-Acclimated Edible Oyster in the Mariculture Environment.” Molecular Ecology 32 (2): 412–27. https://doi.org/10.1111/mec.16751.\nDimond, James L., and Steven B. Roberts. 2016. “Germline DNA Methylation in Reef Corals: Patterns and Potential Roles in Response to Environmental Change.” Molecular Ecology 25 (8): 1895–1904. https://doi.org/10.1111/mec.13414.\nEirin-Lopez, Jose M., and Hollie M. Putnam. 2019. “Marine Environmental Epigenetics.” Annual Review of Marine Science 11 (January): 335–68. https://doi.org/10.1146/annurev-marine–010318–095114.\nGallardo-Escárate, C., V. Valenzuela-Muñoz, S. Boltaña, G. Nuñez-Acuña, D. Valenzuela-Miranda, A. T. Gonçalves, C. Détrée, et al. 2017. “The Caligus Rogercresseyi miRNome: Discovery and Transcriptome Profiling during the Sea Lice Ontogeny.” Agri Gene 4 (June): 8–22. https://doi.org/10.1016/j.aggene.2017.03.002.\nGallardo-Escárate, Cristian, Gabriel Arriagada, Crisleri Carrera, Ana Teresa Gonçalves, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, and Valentina Valenzuela-Muñoz. 2019. “The Race between Host and Sea Lice in the Chilean Salmon Farming: A Genomic Approach.” Reviews in Aquaculture 11 (2): 325–39. https://doi.org/10.1111/raq.12334.\nGallardo-Escárate, Cristian, Valentina Valenzuela-Muñoz, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, Fabian J. Tapia, Marco Yévenes, Gonzalo Gajardo, et al. 2023. “Chromosome-Level Genome Assembly of the Blue Mussel Mytilus Chilensis Reveals Molecular Signatures Facing the Marine Environment.” Genes 14 (4). https://doi.org/10.3390/genes14040876.\nGavery, Mackenzie R., and Steven B. Roberts. 2014. “A Context Dependent Role for DNA Methylation in Bivalves.” Briefings in Functional Genomics 13 (3): 217–22. https://doi.org/10.1093/bfgp/elt054.\nGurr, Samuel J., Shelly A. Trigg, Brent Vadopalas, Steven B. Roberts, and Hollie M. Putnam. 2022. “Acclimatory Gene Expression of Primed Clams Enhances Robustness to Elevated pCO2.” Molecular Ecology 31 (19): 5005–23. https://doi.org/10.1111/mec.16644.\nJuárez, Oscar E., Fabiola Lafarga-De la Cruz, Ignacio Leyva-Valencia, Edgar López-Landavery, Zaúl García-Esquivel, Fernando Díaz, Denisse Re-Araujo, Brent Vadopalas, and Clara E. Galindo-Sánchez. 2018. “Transcriptomic and Metabolic Response to Chronic and Acute Thermal Exposure of Juvenile Geoduck Clams Panopea Globosa.” Marine Genomics 42 (December): 1–13. https://doi.org/10.1016/j.margen.2018.09.003.\nNúñez-Acuña, Gustavo, Constanza Sáez-Vera, Diego Valenzuela-Miranda, Valentina Valenzuela-Muñoz, and Cristian Gallardo-Escárate. 2023. “Whole-Genome Resequencing in the Sea Louse Caligus Rogercresseyi Uncovers Gene Duplications and Copy Number Variants Associated with Pesticide Resistance.” Frontiers in Marine Science 10. https://doi.org/10.3389/fmars.2023.1112691.\nPutnam, Hollie M., Shelly A. Trigg, Samuel J. White, Laura H. Spencer, Brent Vadopalas, Aparna Natarajan, Jonathan Hetzel, et al. 2022. “Dynamic DNA Methylation Contributes to Carryover Effects and Beneficial Acclimatization in Geoduck Clams.” bioRxiv. https://doi.org/10.1101/2022.06.24.497506.\nRoberts, Steven B., and Mackenzie R. Gavery. 2012. “Is There a Relationship between DNA Methylation and Phenotypic Plasticity in Invertebrates?” Frontiers in Physiology 2 (January): 116. https://doi.org/10.3389/fphys.2011.00116.\nRoberts, Steven B., and Mackenzie R Gavery. 2017. “Epigenetic Considerations in Aquaculture.” PeerJ 5 (December): e4147. https://doi.org/10.7717/peerj.4147.\nSadler, Kirsten C. 2023. “Epigenetics across the Evolutionary Tree: New Paradigms from Non-Model Animals.” BioEssays: News and Reviews in Molecular, Cellular and Developmental Biology 45 (1): e2200036. https://doi.org/10.1002/bies.202200036.\nSilliman, Katherine, Laura H. Spencer, Samuel J. White, and Steven B. Roberts. 2023. “Epigenetic and Genetic Population Structure Is Coupled in a Marine Invertebrate.” Genome Biology and Evolution 15 (2). https://doi.org/10.1093/gbe/evad013.\nSpencer, Laura H., Erin Horkan, Ryan Crim, and Steven B. Roberts. 2021. “Latent Effects of Winter Warming on Olympia Oyster Reproduction and Larval Viability.” Journal of Experimental Marine Biology and Ecology 542–543 (September): 151604. https://doi.org/10.1016/j.jembe.2021.151604.\nSpencer, Laura H., Yaamini R. Venkataraman, Ryan Crim, Stuart Ryan, Micah J. Horwith, and Steven B. Roberts. 2020. “Carryover Effects of Temperature and pCO2 across Multiple Olympia Oyster Populations.” Ecological Applications: A Publication of the Ecological Society of America 30 (3): e02060. https://doi.org/10.1002/eap.2060.\nTimmins-Schiffman, Emma B., Grace A. Crandall, Brent Vadopalas, Michael E. Riffle, Brook L. Nunn, and Steven B. Roberts. 2017. “Integrating Discovery-Driven Proteomics and Selected Reaction Monitoring To Develop a Noninvasive Assay for Geoduck Reproductive Maturation.” Journal of Proteome Research 16 (9): 3298–3309. https://doi.org/10.1021/acs.jproteome.7b00288.\nTimmins-Schiffman, Emma, Samuel J. White, Rhonda Elliott Thompson, Brent Vadopalas, Benoit Eudeline, Brook L. Nunn, and Steven B. Roberts. 2021. “Coupled Microbiome Analyses Highlights Relative Functional Roles of Bacteria in a Bivalve Hatchery.” Environmental Microbiome 16 (1): 7. https://doi.org/10.1186/s40793–021–00376-z.\nTrigg, Shelly A., Yaamini R. Venkataraman, Mackenzie R. Gavery, Steven B. Roberts, Debashish Bhattacharya, Alan Downey-Wall, Jose M. Eirin-Lopez, et al. 2022. “Invertebrate Methylomes Provide Insight into Mechanisms of Environmental Tolerance and Reveal Methodological Biases.” Molecular Ecology Resources 22 (4): 1247–61. https://doi.org/10.1111/1755–0998.13542.\nValenzuela-Muñoz, Valentina, Juan Antonio Váldes, and Cristian Gallardo-Escárate. 2021. “Transcriptome Profiling of Long Non-Coding RNAs During the Atlantic Salmon Smoltification Process.” Marine Biotechnology 23 (2): 308–20. https://doi.org/10.1007/s10126–021–10024–9.\nVenkataraman, Yaamini R., Alan M. Downey-Wall, Justin Ries, Isaac Westfield, Samuel J. White, Steven B. Roberts, and Kathleen E. Lotterhos. 2020. “General DNA Methylation Patterns and Environmentally-Induced Differential Methylation in the Eastern Oyster (Crassostrea Virginica).” Frontiers in Marine Science 7. https://doi.org/10.3389/fmars.2020.00225.\nVenkataraman, Yaamini R., Samuel J. White, and Steven B. Roberts. 2022. “Differential DNA Methylation in Pacific Oyster Reproductive Tissue in Response to Ocean Acidification.” BMC Genomics 23 (1): 556. https://doi.org/10.1186/s12864–022–08781–5.\nWanamaker, Shelly A., Kaitlyn R. Mitchell, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma B. Timmins-Schiffman, and Steven B. Roberts. 2020. “Temporal Proteomic Profiling Reveals Insight into Critical Developmental Processes and Temperature-Influenced Physiological Response Differences in a Bivalve Mollusc.” BMC Genomics 21 (1): 723. https://doi.org/10.1186/s12864–020–07127–3."
  },
  {
    "objectID": "Description.html",
    "href": "Description.html",
    "title": "Epigenetic Phenomena Connecting Climate Change and Coastal Marine Species",
    "section": "",
    "text": "Course Title: Epigenetic Phenomena Connecting Climate Change and Coastal Marine Species\nCourse Duration: 1 week\nCourse Description:\nThis one-week intensive graduate-level course explores the intriguing intersection of climate change, epigenetics, and marine invertebrate physiology, with a significant emphasis on the application of functional genomics. The course aims to highlight the substantial yet often overlooked role of marine invertebrates in coastal ecosystems, underlining their ecological significance and their responses to climate change at an epigenetic level.\nThe course starts by establishing a strong foundational understanding of epigenetics, climate change, and marine invertebrate physiology. Following this, students will delve into the intricate role of functional genomics in understanding these connections. Real-world examples will be extensively used to discuss how changes in climate directly and indirectly lead to alterations in the epigenetic mechanisms of various coastal marine invertebrates.\nBy the end of the course, students should have a comprehensive understanding of how climate change can influence the epigenetics and physiology of coastal marine invertebrates and the potential broader implications for marine ecosystems. The course is suitable for students with a basic understanding of genetics and climate science, although students from all disciplines are welcome as the course starts from foundational principles.\nThrough a mix of lectures, discussions, and interactive case studies, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology.\nObjectives:\nObjective 1: Understanding the Interplay between Climate Change, Epigenetics, and Marine Invertebrate Physiology\nThe first objective of the course is to help students gain a comprehensive understanding of how climate change impacts the physiological processes of marine invertebrates, especially through the lens of epigenetics. Students will learn about the fundamentals of marine invertebrate physiology and the various ways in which climate change-related stressors can influence these physiological systems, causing significant changes at an epigenetic level.\nObjective 2: Gaining Proficiency in Functional Genomics\nThe second objective is to ensure that students gain proficiency in the methodologies and applications of functional genomics, particularly in studying the epigenetic changes in marine invertebrates in response to climate change. Students will learn about various genomic techniques, their applications, and how to interpret data from these studies to gain insights into the epigenetic responses of marine invertebrates to climate stressors.\nObjective 3: Developing Skills for Analyzing and Evaluating Scientific Research\nThe third objective is to develop students’ ability to critically analyze and evaluate scientific literature in the field of marine invertebrate epigenetics and climate change. Through case studies and discussions on recent research, students will hone their skills in analyzing experimental designs, interpreting results, and understanding the broader implications of research findings for climate change adaptation and marine conservation efforts.\nContents:\nThis intensive course is divided into five modules:\n\nBasics of Epigenetics and Climate Change: This module provides an overview of climate change science and the principles of epigenetics. We discuss how the two fields intersect and introduce the concept of environmental epigenetics.\nPhysiology of Marine Invertebrates: This module focuses on the essential aspects of marine invertebrate physiology, covering topics such as feeding, digestion, reproduction, and response to environmental stressors.\nImpact of Climate Change on Marine Invertebrate Physiology: This section explores the specific impacts of various climate change-related factors, such as ocean acidification, temperature rise, and salinity changes on the physiology of marine invertebrates.\nFunctional Genomics and Epigenetics: This module delves into the methodologies and applications of functional genomics in studying epigenetic changes. Various genomic techniques such as DNA methylation analysis, chromatin immunoprecipitation, and RNA sequencing will be discussed.\nCase Studies and Current Research: The final module will involve an in-depth examination of recent research studies in the field. Students will be encouraged to critically analyze the studies and discuss the implications of the findings on our understanding of climate change impacts and the role of epigenetics in marine invertebrate adaptation.\n\nMethodology:\nThrough a mix of lectures, discussions, and interactive data analysis, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology. The general format will be lecture in the morning and interactive data analysis in the afternoon. The latter will primarily involve using R and bash.\nBibliography:\nCrandall, Grace, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma Timmins-Schiffman, and Steven Roberts. 2022. “Proteomic Response of Early Juvenile Pacific Oysters (Crassostrea Gigas) to Temperature.” PeerJ 10 (October): e14158. https://doi.org/10.7717/peerj.14158.\nCrandall, Grace, Pamela C. Jensen, Samuel J. White, and Steven Roberts. 2022. “Characterization of the Gene Repertoire and Environmentally Driven Expression Patterns in Tanner Crab (Chionoecetes Bairdi).” Marine Biotechnology 24 (1): 216–25. https://doi.org/10.1007/s10126-022-10100-8.\nDang, Xin, Yong-Kian Lim, Yang Li, Steven B. Roberts, Li Li, and Vengatesen Thiyagarajan. 2023. “Epigenetic-Associated Phenotypic Plasticity of the Ocean Acidification-Acclimated Edible Oyster in the Mariculture Environment.” Molecular Ecology 32 (2): 412–27. https://doi.org/10.1111/mec.16751.\nDimond, James L., and Steven B. Roberts. 2016. “Germline DNA Methylation in Reef Corals: Patterns and Potential Roles in Response to Environmental Change.” Molecular Ecology 25 (8): 1895–1904. https://doi.org/10.1111/mec.13414.\nEirin-Lopez, Jose M., and Hollie M. Putnam. 2019. “Marine Environmental Epigenetics.” Annual Review of Marine Science 11 (January): 335–68. https://doi.org/10.1146/annurev-marine-010318-095114.\nGallardo-Escárate, C., V. Valenzuela-Muñoz, S. Boltaña, G. Nuñez-Acuña, D. Valenzuela-Miranda, A. T. Gonçalves, C. Détrée, et al. 2017. “The Caligus Rogercresseyi miRNome: Discovery and Transcriptome Profiling during the Sea Lice Ontogeny.” Agri Gene 4 (June): 8–22. https://doi.org/10.1016/j.aggene.2017.03.002.\nGallardo-Escárate, Cristian, Gabriel Arriagada, Crisleri Carrera, Ana Teresa Gonçalves, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, and Valentina Valenzuela-Muñoz. 2019. “The Race between Host and Sea Lice in the Chilean Salmon Farming: A Genomic Approach.” Reviews in Aquaculture 11 (2): 325–39. https://doi.org/10.1111/raq.12334.\nGallardo-Escárate, Cristian, Valentina Valenzuela-Muñoz, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, Fabian J. Tapia, Marco Yévenes, Gonzalo Gajardo, et al. 2023. “Chromosome-Level Genome Assembly of the Blue Mussel Mytilus Chilensis Reveals Molecular Signatures Facing the Marine Environment.” Genes 14 (4). https://doi.org/10.3390/genes14040876.\nGavery, Mackenzie R., and Steven B. Roberts. 2014. “A Context Dependent Role for DNA Methylation in Bivalves.” Briefings in Functional Genomics 13 (3): 217–22. https://doi.org/10.1093/bfgp/elt054.\nGurr, Samuel J., Shelly A. Trigg, Brent Vadopalas, Steven B. Roberts, and Hollie M. Putnam. 2022. “Acclimatory Gene Expression of Primed Clams Enhances Robustness to Elevated pCO2.” Molecular Ecology 31 (19): 5005–23. https://doi.org/10.1111/mec.16644.\nJuárez, Oscar E., Fabiola Lafarga-De la Cruz, Ignacio Leyva-Valencia, Edgar López-Landavery, Zaúl García-Esquivel, Fernando Díaz, Denisse Re-Araujo, Brent Vadopalas, and Clara E. Galindo-Sánchez. 2018. “Transcriptomic and Metabolic Response to Chronic and Acute Thermal Exposure of Juvenile Geoduck Clams Panopea Globosa.” Marine Genomics 42 (December): 1–13. https://doi.org/10.1016/j.margen.2018.09.003.\nNúñez-Acuña, Gustavo, Constanza Sáez-Vera, Diego Valenzuela-Miranda, Valentina Valenzuela-Muñoz, and Cristian Gallardo-Escárate. 2023. “Whole-Genome Resequencing in the Sea Louse Caligus Rogercresseyi Uncovers Gene Duplications and Copy Number Variants Associated with Pesticide Resistance.” Frontiers in Marine Science 10. https://doi.org/10.3389/fmars.2023.1112691.\nPutnam, Hollie M., Shelly A. Trigg, Samuel J. White, Laura H. Spencer, Brent Vadopalas, Aparna Natarajan, Jonathan Hetzel, et al. 2022. “Dynamic DNA Methylation Contributes to Carryover Effects and Beneficial Acclimatization in Geoduck Clams.” bioRxiv. https://doi.org/10.1101/2022.06.24.497506.\nRoberts, Steven B., and Mackenzie R. Gavery. 2012. “Is There a Relationship between DNA Methylation and Phenotypic Plasticity in Invertebrates?” Frontiers in Physiology 2 (January): 116. https://doi.org/10.3389/fphys.2011.00116.\nRoberts, Steven B., and Mackenzie R Gavery. 2017. “Epigenetic Considerations in Aquaculture.” PeerJ 5 (December): e4147. https://doi.org/10.7717/peerj.4147.\nSadler, Kirsten C. 2023. “Epigenetics across the Evolutionary Tree: New Paradigms from Non-Model Animals.” BioEssays: News and Reviews in Molecular, Cellular and Developmental Biology 45 (1): e2200036. https://doi.org/10.1002/bies.202200036.\nSilliman, Katherine, Laura H. Spencer, Samuel J. White, and Steven B. Roberts. 2023. “Epigenetic and Genetic Population Structure Is Coupled in a Marine Invertebrate.” Genome Biology and Evolution 15 (2). https://doi.org/10.1093/gbe/evad013.\nSpencer, Laura H., Erin Horkan, Ryan Crim, and Steven B. Roberts. 2021. “Latent Effects of Winter Warming on Olympia Oyster Reproduction and Larval Viability.” Journal of Experimental Marine Biology and Ecology 542-543 (September): 151604. https://doi.org/10.1016/j.jembe.2021.151604.\nSpencer, Laura H., Yaamini R. Venkataraman, Ryan Crim, Stuart Ryan, Micah J. Horwith, and Steven B. Roberts. 2020. “Carryover Effects of Temperature and pCO2 across Multiple Olympia Oyster Populations.” Ecological Applications: A Publication of the Ecological Society of America 30 (3): e02060. https://doi.org/10.1002/eap.2060.\nTimmins-Schiffman, Emma B., Grace A. Crandall, Brent Vadopalas, Michael E. Riffle, Brook L. Nunn, and Steven B. Roberts. 2017. “Integrating Discovery-Driven Proteomics and Selected Reaction Monitoring To Develop a Noninvasive Assay for Geoduck Reproductive Maturation.” Journal of Proteome Research 16 (9): 3298–3309. https://doi.org/10.1021/acs.jproteome.7b00288.\nTimmins-Schiffman, Emma, Samuel J. White, Rhonda Elliott Thompson, Brent Vadopalas, Benoit Eudeline, Brook L. Nunn, and Steven B. Roberts. 2021. “Coupled Microbiome Analyses Highlights Relative Functional Roles of Bacteria in a Bivalve Hatchery.” Environmental Microbiome 16 (1): 7. https://doi.org/10.1186/s40793-021-00376-z.\nTrigg, Shelly A., Yaamini R. Venkataraman, Mackenzie R. Gavery, Steven B. Roberts, Debashish Bhattacharya, Alan Downey-Wall, Jose M. Eirin-Lopez, et al. 2022. “Invertebrate Methylomes Provide Insight into Mechanisms of Environmental Tolerance and Reveal Methodological Biases.” Molecular Ecology Resources 22 (4): 1247–61. https://doi.org/10.1111/1755-0998.13542.\nValenzuela-Muñoz, Valentina, Juan Antonio Váldes, and Cristian Gallardo-Escárate. 2021. “Transcriptome Profiling of Long Non-Coding RNAs During the Atlantic Salmon Smoltification Process.” Marine Biotechnology 23 (2): 308–20. https://doi.org/10.1007/s10126-021-10024-9.\nVenkataraman, Yaamini R., Alan M. Downey-Wall, Justin Ries, Isaac Westfield, Samuel J. White, Steven B. Roberts, and Kathleen E. Lotterhos. 2020. “General DNA Methylation Patterns and Environmentally-Induced Differential Methylation in the Eastern Oyster (Crassostrea Virginica).” Frontiers in Marine Science 7. https://doi.org/10.3389/fmars.2020.00225.\nVenkataraman, Yaamini R., Samuel J. White, and Steven B. Roberts. 2022. “Differential DNA Methylation in Pacific Oyster Reproductive Tissue in Response to Ocean Acidification.” BMC Genomics 23 (1): 556. https://doi.org/10.1186/s12864-022-08781-5.\nWanamaker, Shelly A., Kaitlyn R. Mitchell, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma B. Timmins-Schiffman, and Steven B. Roberts. 2020. “Temporal Proteomic Profiling Reveals Insight into Critical Developmental Processes and Temperature-Influenced Physiological Response Differences in a Bivalve Mollusc.” BMC Genomics 21 (1): 723. https://doi.org/10.1186/s12864-020-07127-3."
  },
  {
    "objectID": "modules/day01.html",
    "href": "modules/day01.html",
    "title": "Daily Outline",
    "section": "",
    "text": "Course Description\nInstructor Background\nClass Background and Interests\nHomeostasis\nCell and Molecular Biology\n\nLunch\n\nDiscussion of Reproducible & Open Science\nOverview of Framework of for Computational Component\nDemonstration: Bash\nCase Study: Gene Expression"
  },
  {
    "objectID": "modules/day01.html#day-01",
    "href": "modules/day01.html#day-01",
    "title": "Daily Outline",
    "section": "",
    "text": "Course Description\nInstructor Background\nClass Background and Interests\nHomeostasis\nCell and Molecular Biology\n\nLunch\n\nDiscussion of Reproducible & Open Science\nOverview of Framework of for Computational Component\nDemonstration: Bash\nCase Study: Gene Expression"
  },
  {
    "objectID": "modules/day01.html#day-02",
    "href": "modules/day01.html#day-02",
    "title": "Daily Outline",
    "section": "Day 02",
    "text": "Day 02"
  },
  {
    "objectID": "modules/00-markdown.html",
    "href": "modules/00-markdown.html",
    "title": "markdown",
    "section": "",
    "text": "Markdown is a lightweight markup language created by John Gruber and Aaron Swartz in 2004. It is designed to be easy-to-read and easy-to-write. The syntax allows you to format text using simple symbols and characters you already know. For example, you can use asterisks * or underscores _ to create italics or bold text. You can also create lists, headers, links, and many other formatting features easily.\n\n\n\n\nMarkdown is much simpler to learn compared to other markup languages like HTML. This makes it a quick tool for anyone who wants to write well-formatted content without the steep learning curve.\n\n\n\nMarkdown files are plain text files with a .md extension, which means they can be opened with any text editor. This makes them extremely portable and easy to manage.\n\n\n\nMarkdown is commonly used for readme files, GitHub repositories, blogging platforms like Jekyll, and even in data science notebooks like Jupyter.\n\n\n\nThe syntax is designed to be readable as-is, so even if you’re not rendering the Markdown to HTML or another format, it’s still easy to understand what’s going on.\n\n\n\n\nHere are some basic examples of Markdown syntax:\n\nHeaders:\n# H1\n## H2\n### H3\nLists:\n- Item 1\n- Item 2\n    - Sub-item\nor\n1. Item 1\n2. Item 2\nLinks:\n[OpenAI](https://www.openai.com/)\nImages:\n![Alt text](url)\nCode Blocks:\n```bash\n Code goes here\n```\nIn-line Code:\nUse `code` in your markdown file.\n\n\n\n\n\n\nThe beauty of Markdown lies in its simplicity. Stick to the basics unless there’s a strong reason to use a complex feature.\n\n\n\nIf you’re working on a longer document or a series of documents, be consistent in your style and formatting. This will make it easier for others (or future you) to read and modify the content.\n\n\n\nConsider using a Markdown style guide or linter to keep your formatting consistent. This is especially helpful for collaborative projects.\n\n\n\nMany platforms support Markdown extensions that provide additional features like tables, footnotes, and task lists. While these are useful, keep in mind that they may not be supported everywhere.\n\n\n\nAlways preview your Markdown file before publishing to make sure it looks the way you intended.\nBy adopting these best practices, you’ll be able to create content that is clean, easy to read, and easy to maintain."
  },
  {
    "objectID": "modules/00-markdown.html#why-is-markdown-useful",
    "href": "modules/00-markdown.html#why-is-markdown-useful",
    "title": "markdown",
    "section": "",
    "text": "Markdown is much simpler to learn compared to other markup languages like HTML. This makes it a quick tool for anyone who wants to write well-formatted content without the steep learning curve.\n\n\n\nMarkdown files are plain text files with a .md extension, which means they can be opened with any text editor. This makes them extremely portable and easy to manage.\n\n\n\nMarkdown is commonly used for readme files, GitHub repositories, blogging platforms like Jekyll, and even in data science notebooks like Jupyter.\n\n\n\nThe syntax is designed to be readable as-is, so even if you’re not rendering the Markdown to HTML or another format, it’s still easy to understand what’s going on."
  },
  {
    "objectID": "modules/00-markdown.html#markdown-syntax-and-examples",
    "href": "modules/00-markdown.html#markdown-syntax-and-examples",
    "title": "markdown",
    "section": "",
    "text": "Here are some basic examples of Markdown syntax:\n\nHeaders:\n# H1\n## H2\n### H3\nLists:\n- Item 1\n- Item 2\n    - Sub-item\nor\n1. Item 1\n2. Item 2\nLinks:\n[OpenAI](https://www.openai.com/)\nImages:\n![Alt text](url)\nCode Blocks:\n```bash\n Code goes here\n```\nIn-line Code:\nUse `code` in your markdown file."
  },
  {
    "objectID": "modules/00-markdown.html#best-practices",
    "href": "modules/00-markdown.html#best-practices",
    "title": "markdown",
    "section": "",
    "text": "The beauty of Markdown lies in its simplicity. Stick to the basics unless there’s a strong reason to use a complex feature.\n\n\n\nIf you’re working on a longer document or a series of documents, be consistent in your style and formatting. This will make it easier for others (or future you) to read and modify the content.\n\n\n\nConsider using a Markdown style guide or linter to keep your formatting consistent. This is especially helpful for collaborative projects.\n\n\n\nMany platforms support Markdown extensions that provide additional features like tables, footnotes, and task lists. While these are useful, keep in mind that they may not be supported everywhere.\n\n\n\nAlways preview your Markdown file before publishing to make sure it looks the way you intended.\nBy adopting these best practices, you’ll be able to create content that is clean, easy to read, and easy to maintain."
  },
  {
    "objectID": "modules/10-climate.html",
    "href": "modules/10-climate.html",
    "title": "Climate Change",
    "section": "",
    "text": "Climate change, a pressing global issue, is significantly impacting coastal marine species, with notable effects on marine invertebrates.\n\n\nRising Sea Temperatures: The increase in global temperatures, a hallmark of climate change, has a direct effect on marine ecosystems. Marine invertebrates, such as corals, mollusks, and crustaceans, are particularly sensitive to temperature changes. For instance, coral bleaching, where corals lose their symbiotic algae due to stress from elevated temperatures, undermines the foundation of coral reef ecosystems. These reefs are vital as they provide habitat, food, and breeding grounds for a diverse range of marine life.\nOcean Acidification: The absorption of increased levels of atmospheric CO2 by the oceans leads to ocean acidification. This chemical change in seawater can have deleterious effects on calcifying invertebrates like mollusks and corals. The reduced pH levels interfere with the ability of these organisms to produce and maintain their calcium carbonate structures, essential for their survival and for the ecosystem as a whole.\nHabitat Loss and Alteration: Climate change contributes to sea-level rise and changes in ocean currents, leading to habitat loss and alteration. Coastal habitats like mangroves, which are crucial for many marine invertebrates, are being lost at an alarming rate. This loss not only affects the species residing there but also alters the larger ecological dynamics, including predator-prey relationships and breeding patterns.\nChanges in Species Distributions and Behavior: As ocean temperatures shift, marine invertebrates may migrate to cooler waters, leading to changes in geographical distribution. This shift can disrupt existing ecological balances, as new species interactions emerge and established ones are lost. For example, the migration of certain species might lead to the introduction of new predators or competitors, impacting local biodiversity.\nIncreased Incidence of Diseases: Warmer waters can lead to an increase in the prevalence and severity of diseases affecting marine invertebrates. Pathogens and parasites thrive in these conditions, posing a significant threat to species that have not evolved to cope with these new challenges.\nImpact on Reproduction and Life Cycles: Climate change can influence the reproductive cycles of marine invertebrates. Temperature changes can affect spawning times, larval development, and survival rates. For species with complex life cycles, like many marine invertebrates, even slight changes in environmental conditions can have cascading effects on their populations.\n\nIn conclusion, climate change is altering the very fabric of coastal marine ecosystems, with profound implications for marine invertebrates. Understanding and mitigating these impacts is crucial for preserving biodiversity and the health of our oceans. For those delving into marine biology or environmental sciences, appreciating the complexities of these changes is vital for developing effective aquaculture production and conservation strategies"
  },
  {
    "objectID": "modules/00-welcome.html",
    "href": "modules/00-welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "There are few things to do beforehand if you have the time.\n\nComplete this pre-course survey\nGet a GitHub Account if you do not already have one."
  },
  {
    "objectID": "modules/00-welcome.html#pre-course-logistics",
    "href": "modules/00-welcome.html#pre-course-logistics",
    "title": "Welcome",
    "section": "",
    "text": "There are few things to do beforehand if you have the time.\n\nComplete this pre-course survey\nGet a GitHub Account if you do not already have one."
  },
  {
    "objectID": "modules/00-welcome.html#course-description",
    "href": "modules/00-welcome.html#course-description",
    "title": "Welcome",
    "section": "Course Description:",
    "text": "Course Description:\nThis one-week intensive graduate-level course explores the intriguing intersection of climate change, epigenetics, and marine invertebrate physiology, with a significant emphasis on the application of functional genomics. The course aims to highlight the substantial yet often overlooked role of marine invertebrates in coastal ecosystems, underlining their ecological significance and their responses to climate change at an epigenetic level.\nThe course starts by establishing a strong foundational understanding of epigenetics, climate change, and marine invertebrate physiology. Following this, students will delve into the intricate role of functional genomics in understanding these connections. Real-world examples will be extensively used to discuss how changes in climate directly and indirectly lead to alterations in the epigenetic mechanisms of various coastal marine invertebrates.\nBy the end of the course, students should have a comprehensive understanding of how climate change can influence the epigenetics and physiology of coastal marine invertebrates and the potential broader implications for marine ecosystems. The course is suitable for students with a basic understanding of genetics and climate science, although students from all disciplines are welcome as the course starts from foundational principles.\nThrough a mix of lectures, discussions, and interactive case studies, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology.\n\nObjectives:\nObjective 1: Understanding the Interplay between Climate Change, Epigenetics, and Marine Invertebrate Physiology\nThe first objective of the course is to help students gain a comprehensive understanding of how climate change impacts the physiological processes of marine invertebrates, especially through the lens of epigenetics. Students will learn about the fundamentals of marine invertebrate physiology and the various ways in which climate change-related stressors can influence these physiological systems, causing significant changes at an epigenetic level.\nObjective 2: Gaining Proficiency in Functional Genomics\nThe second objective is to ensure that students gain proficiency in the methodologies and applications of functional genomics, particularly in studying the epigenetic changes in marine invertebrates in response to climate change. Students will learn about various genomic techniques, their applications, and how to interpret data from these studies to gain insights into the epigenetic responses of marine invertebrates to climate stressors.\nObjective 3: Developing Skills for Analyzing and Evaluating Scientific Research\nThe third objective is to develop students’ ability to critically analyze and evaluate scientific literature in the field of marine invertebrate epigenetics and climate change. Through case studies and discussions on recent research, students will hone their skills in analyzing experimental designs, interpreting results, and understanding the broader implications of research findings for climate change adaptation and marine conservation efforts.\n\n\nContents:\nBasics of Epigenetics and Climate Change: This module provides an overview of climate change science and the principles of epigenetics. We discuss how the two fields intersect and introduce the concept of environmental epigenetics.\nPhysiology of Marine Invertebrates: This module focuses on the essential aspects of marine invertebrate physiology, covering topics such as feeding, digestion, reproduction, and response to environmental stressors.\nImpact of Climate Change on Marine Invertebrate Physiology: This section explores the specific impacts of various climate change-related factors, such as ocean acidification, temperature rise, and salinity changes on the physiology of marine invertebrates.\nFunctional Genomics and Epigenetics: This module delves into the methodologies and applications of functional genomics in studying epigenetic changes. Various genomic techniques such as DNA methylation analysis, chromatin immunoprecipitation, and RNA sequencing will be discussed.\nCase Studies and Current Research: The final module will involve an in-depth examination of recent research studies in the field. Students will be encouraged to critically analyze the studies and discuss the implications of the findings on our understanding of climate change impacts and the role of epigenetics in marine invertebrate adaptation."
  },
  {
    "objectID": "modules/00-welcome.html#methodology",
    "href": "modules/00-welcome.html#methodology",
    "title": "Welcome",
    "section": "Methodology:",
    "text": "Methodology:\nThrough a mix of lectures, discussions, and interactive data analysis, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology. The general format will be lecture in the morning and interactive data analysis in the afternoon. The latter will primarily involve using R and bash."
  },
  {
    "objectID": "modules/00-welcome.html#bibliography",
    "href": "modules/00-welcome.html#bibliography",
    "title": "Welcome",
    "section": "Bibliography:",
    "text": "Bibliography:\nCrandall, Grace, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma Timmins-Schiffman, and Steven Roberts. 2022. “Proteomic Response of Early Juvenile Pacific Oysters (Crassostrea Gigas) to Temperature.” PeerJ 10 (October): e14158. https://doi.org/10.7717/peerj.14158.\nCrandall, Grace, Pamela C. Jensen, Samuel J. White, and Steven Roberts. 2022. “Characterization of the Gene Repertoire and Environmentally Driven Expression Patterns in Tanner Crab (Chionoecetes Bairdi).” Marine Biotechnology 24 (1): 216–25. https://doi.org/10.1007/s10126–022–10100–8.\nDang, Xin, Yong-Kian Lim, Yang Li, Steven B. Roberts, Li Li, and Vengatesen Thiyagarajan. 2023. “Epigenetic-Associated Phenotypic Plasticity of the Ocean Acidification-Acclimated Edible Oyster in the Mariculture Environment.” Molecular Ecology 32 (2): 412–27. https://doi.org/10.1111/mec.16751.\nDimond, James L., and Steven B. Roberts. 2016. “Germline DNA Methylation in Reef Corals: Patterns and Potential Roles in Response to Environmental Change.” Molecular Ecology 25 (8): 1895–1904. https://doi.org/10.1111/mec.13414.\nEirin-Lopez, Jose M., and Hollie M. Putnam. 2019. “Marine Environmental Epigenetics.” Annual Review of Marine Science 11 (January): 335–68. https://doi.org/10.1146/annurev-marine–010318–095114.\nGallardo-Escárate, C., V. Valenzuela-Muñoz, S. Boltaña, G. Nuñez-Acuña, D. Valenzuela-Miranda, A. T. Gonçalves, C. Détrée, et al. 2017. “The Caligus Rogercresseyi miRNome: Discovery and Transcriptome Profiling during the Sea Lice Ontogeny.” Agri Gene 4 (June): 8–22. https://doi.org/10.1016/j.aggene.2017.03.002.\nGallardo-Escárate, Cristian, Gabriel Arriagada, Crisleri Carrera, Ana Teresa Gonçalves, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, and Valentina Valenzuela-Muñoz. 2019. “The Race between Host and Sea Lice in the Chilean Salmon Farming: A Genomic Approach.” Reviews in Aquaculture 11 (2): 325–39. https://doi.org/10.1111/raq.12334.\nGallardo-Escárate, Cristian, Valentina Valenzuela-Muñoz, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, Fabian J. Tapia, Marco Yévenes, Gonzalo Gajardo, et al. 2023. “Chromosome-Level Genome Assembly of the Blue Mussel Mytilus Chilensis Reveals Molecular Signatures Facing the Marine Environment.” Genes 14 (4). https://doi.org/10.3390/genes14040876.\nGavery, Mackenzie R., and Steven B. Roberts. 2014. “A Context Dependent Role for DNA Methylation in Bivalves.” Briefings in Functional Genomics 13 (3): 217–22. https://doi.org/10.1093/bfgp/elt054.\nGurr, Samuel J., Shelly A. Trigg, Brent Vadopalas, Steven B. Roberts, and Hollie M. Putnam. 2022. “Acclimatory Gene Expression of Primed Clams Enhances Robustness to Elevated pCO2.” Molecular Ecology 31 (19): 5005–23. https://doi.org/10.1111/mec.16644.\nJuárez, Oscar E., Fabiola Lafarga-De la Cruz, Ignacio Leyva-Valencia, Edgar López-Landavery, Zaúl García-Esquivel, Fernando Díaz, Denisse Re-Araujo, Brent Vadopalas, and Clara E. Galindo-Sánchez. 2018. “Transcriptomic and Metabolic Response to Chronic and Acute Thermal Exposure of Juvenile Geoduck Clams Panopea Globosa.” Marine Genomics 42 (December): 1–13. https://doi.org/10.1016/j.margen.2018.09.003.\nNúñez-Acuña, Gustavo, Constanza Sáez-Vera, Diego Valenzuela-Miranda, Valentina Valenzuela-Muñoz, and Cristian Gallardo-Escárate. 2023. “Whole-Genome Resequencing in the Sea Louse Caligus Rogercresseyi Uncovers Gene Duplications and Copy Number Variants Associated with Pesticide Resistance.” Frontiers in Marine Science 10. https://doi.org/10.3389/fmars.2023.1112691.\nPutnam, Hollie M., Shelly A. Trigg, Samuel J. White, Laura H. Spencer, Brent Vadopalas, Aparna Natarajan, Jonathan Hetzel, et al. 2022. “Dynamic DNA Methylation Contributes to Carryover Effects and Beneficial Acclimatization in Geoduck Clams.” bioRxiv. https://doi.org/10.1101/2022.06.24.497506.\nRoberts, Steven B., and Mackenzie R. Gavery. 2012. “Is There a Relationship between DNA Methylation and Phenotypic Plasticity in Invertebrates?” Frontiers in Physiology 2 (January): 116. https://doi.org/10.3389/fphys.2011.00116.\nRoberts, Steven B., and Mackenzie R Gavery. 2017. “Epigenetic Considerations in Aquaculture.” PeerJ 5 (December): e4147. https://doi.org/10.7717/peerj.4147.\nSadler, Kirsten C. 2023. “Epigenetics across the Evolutionary Tree: New Paradigms from Non-Model Animals.” BioEssays: News and Reviews in Molecular, Cellular and Developmental Biology 45 (1): e2200036. https://doi.org/10.1002/bies.202200036.\nSilliman, Katherine, Laura H. Spencer, Samuel J. White, and Steven B. Roberts. 2023. “Epigenetic and Genetic Population Structure Is Coupled in a Marine Invertebrate.” Genome Biology and Evolution 15 (2). https://doi.org/10.1093/gbe/evad013.\nSpencer, Laura H., Erin Horkan, Ryan Crim, and Steven B. Roberts. 2021. “Latent Effects of Winter Warming on Olympia Oyster Reproduction and Larval Viability.” Journal of Experimental Marine Biology and Ecology 542–543 (September): 151604. https://doi.org/10.1016/j.jembe.2021.151604.\nSpencer, Laura H., Yaamini R. Venkataraman, Ryan Crim, Stuart Ryan, Micah J. Horwith, and Steven B. Roberts. 2020. “Carryover Effects of Temperature and pCO2 across Multiple Olympia Oyster Populations.” Ecological Applications: A Publication of the Ecological Society of America 30 (3): e02060. https://doi.org/10.1002/eap.2060.\nTimmins-Schiffman, Emma B., Grace A. Crandall, Brent Vadopalas, Michael E. Riffle, Brook L. Nunn, and Steven B. Roberts. 2017. “Integrating Discovery-Driven Proteomics and Selected Reaction Monitoring To Develop a Noninvasive Assay for Geoduck Reproductive Maturation.” Journal of Proteome Research 16 (9): 3298–3309. https://doi.org/10.1021/acs.jproteome.7b00288.\nTimmins-Schiffman, Emma, Samuel J. White, Rhonda Elliott Thompson, Brent Vadopalas, Benoit Eudeline, Brook L. Nunn, and Steven B. Roberts. 2021. “Coupled Microbiome Analyses Highlights Relative Functional Roles of Bacteria in a Bivalve Hatchery.” Environmental Microbiome 16 (1): 7. https://doi.org/10.1186/s40793–021–00376-z.\nTrigg, Shelly A., Yaamini R. Venkataraman, Mackenzie R. Gavery, Steven B. Roberts, Debashish Bhattacharya, Alan Downey-Wall, Jose M. Eirin-Lopez, et al. 2022. “Invertebrate Methylomes Provide Insight into Mechanisms of Environmental Tolerance and Reveal Methodological Biases.” Molecular Ecology Resources 22 (4): 1247–61. https://doi.org/10.1111/1755–0998.13542.\nValenzuela-Muñoz, Valentina, Juan Antonio Váldes, and Cristian Gallardo-Escárate. 2021. “Transcriptome Profiling of Long Non-Coding RNAs During the Atlantic Salmon Smoltification Process.” Marine Biotechnology 23 (2): 308–20. https://doi.org/10.1007/s10126–021–10024–9.\nVenkataraman, Yaamini R., Alan M. Downey-Wall, Justin Ries, Isaac Westfield, Samuel J. White, Steven B. Roberts, and Kathleen E. Lotterhos. 2020. “General DNA Methylation Patterns and Environmentally-Induced Differential Methylation in the Eastern Oyster (Crassostrea Virginica).” Frontiers in Marine Science 7. https://doi.org/10.3389/fmars.2020.00225.\nVenkataraman, Yaamini R., Samuel J. White, and Steven B. Roberts. 2022. “Differential DNA Methylation in Pacific Oyster Reproductive Tissue in Response to Ocean Acidification.” BMC Genomics 23 (1): 556. https://doi.org/10.1186/s12864–022–08781–5.\nWanamaker, Shelly A., Kaitlyn R. Mitchell, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma B. Timmins-Schiffman, and Steven B. Roberts. 2020. “Temporal Proteomic Profiling Reveals Insight into Critical Developmental Processes and Temperature-Influenced Physiological Response Differences in a Bivalve Mollusc.” BMC Genomics 21 (1): 723. https://doi.org/10.1186/s12864–020–07127–3."
  },
  {
    "objectID": "modules/03-rstudio.html",
    "href": "modules/03-rstudio.html",
    "title": "RStudio",
    "section": "",
    "text": "RStudio is an Integrated Development Environment (IDE) for R, a programming language for statistical computing and data visualization. Developed by RStudio, Inc., this IDE provides a user-friendly interface to R, making it easier to write code, run analyses, and produce plots. It includes features such as syntax highlighting, code completion, and the ability to run R code interactively.\n\n\n\n\nRStudio consolidates your code, plots, and output in one place, improving workflow and making the process more efficient.\n\n\n\nWith features like auto-completion and built-in debugging tools, RStudio speeds up the coding process.\n\n\n\nRStudio simplifies the process of creating complex data visualizations by providing easy-to-use interfaces for ggplot2, Shiny, and other R packages.\n\n\n\nRStudio includes integrated support for Git and GitHub, making it easier to manage changes to your code and collaborate with others.\n\n\n\nRStudio supports various R packages and also allows the use of other programming languages like C++, Python, and SQL within the IDE.\n\n\n\n\n\nScript Editor: Write and edit your R scripts.\nConsole: Run R commands interactively.\n&gt; print(\"Hello, World!\")\nEnvironment: View and manage all variables, data frames, and other objects in your R session.\nPlots: Visualize your data and generate plots easily.\nggplot(data, aes(x=x, y=y)) + geom_point()\nPackages: Install and manage R packages.\ninstall.packages(\"tidyverse\")\nHelp: Access R documentation quickly.\nFile Browser: Navigate your file system and manage your project files.\nVersion Control: Manage Git repositories directly within RStudio.\ngit commit -m \"Initial commit\"\nShiny Apps: Build interactive web apps right within RStudio.\n\n\n\n\n\n\nUse RStudio Projects to keep your scripts, data, and other files organized. This makes it easier to manage complex analyses and collaborate with others.\n\n\n\nUse comments to describe what your code is doing. This makes it easier for you (and others) to understand the logic later.\n```R\n# Calculate the mean of x\nmean_x &lt;- mean(x)\n```\n\n\n\nMake your code and analyses reproducible. Use relative file paths and R Markdown documents to ensure others can easily run your code.\n\n\n\nUse Git to keep track of changes in your project. This is invaluable for collaboration and data science project management.\n\n\n\nDon’t reinvent the wheel. Make use of R’s extensive library of packages and functions to perform common tasks.\n\n\n\nLearn RStudio’s keyboard shortcuts to navigate the IDE more efficiently.\n\n\n\nTo make use of the latest features and improvements, keep your R and RStudio installations up to date.\nBy adhering to these best practices, you can make the most out of RStudio, whether you’re doing data analysis, statistical modeling, or creating data visualizations."
  },
  {
    "objectID": "modules/03-rstudio.html#why-is-rstudio-useful",
    "href": "modules/03-rstudio.html#why-is-rstudio-useful",
    "title": "RStudio",
    "section": "",
    "text": "RStudio consolidates your code, plots, and output in one place, improving workflow and making the process more efficient.\n\n\n\nWith features like auto-completion and built-in debugging tools, RStudio speeds up the coding process.\n\n\n\nRStudio simplifies the process of creating complex data visualizations by providing easy-to-use interfaces for ggplot2, Shiny, and other R packages.\n\n\n\nRStudio includes integrated support for Git and GitHub, making it easier to manage changes to your code and collaborate with others.\n\n\n\nRStudio supports various R packages and also allows the use of other programming languages like C++, Python, and SQL within the IDE."
  },
  {
    "objectID": "modules/03-rstudio.html#key-rstudio-features-and-examples",
    "href": "modules/03-rstudio.html#key-rstudio-features-and-examples",
    "title": "RStudio",
    "section": "",
    "text": "Script Editor: Write and edit your R scripts.\nConsole: Run R commands interactively.\n&gt; print(\"Hello, World!\")\nEnvironment: View and manage all variables, data frames, and other objects in your R session.\nPlots: Visualize your data and generate plots easily.\nggplot(data, aes(x=x, y=y)) + geom_point()\nPackages: Install and manage R packages.\ninstall.packages(\"tidyverse\")\nHelp: Access R documentation quickly.\nFile Browser: Navigate your file system and manage your project files.\nVersion Control: Manage Git repositories directly within RStudio.\ngit commit -m \"Initial commit\"\nShiny Apps: Build interactive web apps right within RStudio."
  },
  {
    "objectID": "modules/03-rstudio.html#best-practices",
    "href": "modules/03-rstudio.html#best-practices",
    "title": "RStudio",
    "section": "",
    "text": "Use RStudio Projects to keep your scripts, data, and other files organized. This makes it easier to manage complex analyses and collaborate with others.\n\n\n\nUse comments to describe what your code is doing. This makes it easier for you (and others) to understand the logic later.\n```R\n# Calculate the mean of x\nmean_x &lt;- mean(x)\n```\n\n\n\nMake your code and analyses reproducible. Use relative file paths and R Markdown documents to ensure others can easily run your code.\n\n\n\nUse Git to keep track of changes in your project. This is invaluable for collaboration and data science project management.\n\n\n\nDon’t reinvent the wheel. Make use of R’s extensive library of packages and functions to perform common tasks.\n\n\n\nLearn RStudio’s keyboard shortcuts to navigate the IDE more efficiently.\n\n\n\nTo make use of the latest features and improvements, keep your R and RStudio installations up to date.\nBy adhering to these best practices, you can make the most out of RStudio, whether you’re doing data analysis, statistical modeling, or creating data visualizations."
  },
  {
    "objectID": "modules/03-rstudio.html#r-markdown-and-report-generation",
    "href": "modules/03-rstudio.html#r-markdown-and-report-generation",
    "title": "RStudio",
    "section": "R Markdown and report generation",
    "text": "R Markdown and report generation\nTo effectively generate pretty reports you need to understand\n\nDocument structure: Learn the structure of an R Markdown document, which consists of a YAML header (metadata), code chunks, and narrative text.\nYAML header: Familiarize yourself with the YAML header and its key components such as ‘title’, ‘author’, ‘date’, and ‘output’. Customize the output format and options (e.g., ‘html_document’, ‘pdf_document’, or ‘word_document’).\nCode chunks: Understand how to insert and customize code chunks using triple backticks (```{r}), options like ‘echo’, ‘eval’, ‘include’, and ‘cache’, and inline R code using r.\nMarkdown syntax: Learn the basic Markdown syntax for formatting text, such as headers, lists, tables, links, images, and emphasis (bold, italics).\nKnitting: Get comfortable with the process of knitting an R Markdown document to generate the desired output format (e.g., HTML, PDF, or Word) using the “Knit” button in RStudio or the ‘rmarkdown::render()’ function.\nReproducible research: Learn the importance of reproducible research and best practices for organizing R projects, version control, and data management."
  },
  {
    "objectID": "modules/03-rstudio.html#code-chunks",
    "href": "modules/03-rstudio.html#code-chunks",
    "title": "RStudio",
    "section": "Code Chunks",
    "text": "Code Chunks\nCode chunk options are used to control the behavior and appearance of R code chunks in R Markdown documents. They are set within the curly braces {} following the language identifier (e.g., r). Here is a description of essential code chunk options to know and use:\n\necho: Determines whether the code chunk is displayed in the output document. Set echo=TRUE to display the code or echo=FALSE to hide it. The default is TRUE.\neval: Controls whether the code chunk is executed. Set eval=TRUE to execute the code or eval=FALSE to prevent execution. The default is TRUE.\ninclude: Determines whether the code chunk, its output, or both are included in the final output. Set include=TRUE to include both or include=FALSE to exclude both. The default is TRUE.\nresults: Controls the display of code chunk results. Options include 'markup' (default) to include the output as-is, 'hide' to hide the output, 'asis' to display raw results, and 'hold' to display all output at once at the end of the code chunk.\nmessage: Controls whether to display messages generated by the code chunk. Set message=TRUE to display messages or message=FALSE to hide them. The default is TRUE.\nwarning: Determines whether to display warnings generated by the code chunk. Set warning=TRUE to display warnings or warning=FALSE to hide them. The default is TRUE.\nerror: Controls whether to stop knitting if a code chunk generates an error. Set error=TRUE to continue knitting even if an error occurs or error=FALSE to stop knitting. The default is FALSE.\nfig.width and fig.height: Set the width and height of the output plots, respectively, in inches. For example, fig.width=6 and fig.height=4 set a 6x4-inch plot size.\nfig.align: Controls the horizontal alignment of plots in the output document. Options include 'left', 'center', and 'right'. The default is 'default', which depends on the output format.\ncache: Determines whether to cache the results of a code chunk. Set cache=TRUE to cache the results or cache=FALSE to re-run the code chunk every time the document is knit. The default is FALSE.\n\nBy understanding and using these essential code chunk options, you can gain better control over the execution, display, and formatting of your R code and its output within R Markdown documents.\n\ncache option\nThe cache option in R Markdown allows you to cache the results of code chunks, so they don’t need to be re-evaluated every time the document is knit. This can significantly speed up the knitting process for documents with computationally intensive or time-consuming code chunks.\nBenefits of using the cache option:\n\nFaster knitting: By caching the results of expensive code chunks, you can save time and resources when re-knitting your document, especially when only making small changes that don’t affect the cached chunks.\nConsistency: When working with random processes or time-sensitive data, caching the results can help maintain consistency across multiple versions of the document.\nResource management: Caching can help manage resources for large datasets or computationally intensive tasks that may otherwise cause the knitting process to fail or become unresponsive.\n\nHere’s an example of using the cache option in an R Markdown code chunk:\n```{r expensive-operation, cache=TRUE}\n# Simulate a time-consuming operation\nSys.sleep(10)\nresult &lt;- rnorm(1000, mean=100, sd=15)\nsummary(result)\n```\nIn this example, the code chunk simulates a time-consuming operation by waiting for 10 seconds before generating random data. By setting cache=TRUE, the results of this code chunk are cached, so that they are not re-evaluated every time the document is knit. This can save time and ensure that the random data remains consistent between document versions.\nKeep in mind that you should use the cache option carefully, as it may cause unexpected behavior if you’re caching results that depend on external resources or dynamic data. Always verify that your document produces the desired output when using the cache option."
  },
  {
    "objectID": "modules/03-rstudio.html#global-chunk-options",
    "href": "modules/03-rstudio.html#global-chunk-options",
    "title": "RStudio",
    "section": "Global Chunk Options",
    "text": "Global Chunk Options\nGlobal chunk options are settings that apply to all code chunks in an R Markdown document by default. You can set global options using the knitr::opts_chunk$set() function at the beginning of your R Markdown document, typically in an initial code chunk. By setting global options, you can maintain consistency across all code chunks and reduce the need to set options individually for each chunk.\nHere’s an example of setting global chunk options:\n```{r}\nlibrary(knitr)\nopts_chunk$set(\n  echo = TRUE,         # Display code chunks\n  eval = TRUE,         # Evaluate code chunks\n  warning = FALSE,     # Hide warnings\n  message = FALSE,     # Hide messages\n  fig.width = 6,       # Set plot width in inches\n  fig.height = 4,      # Set plot height in inches\n  fig.align = \"center\" # Align plots to the center\n)\n```"
  },
  {
    "objectID": "modules/03-rstudio.html#tables-and-images",
    "href": "modules/03-rstudio.html#tables-and-images",
    "title": "RStudio",
    "section": "Tables and Images",
    "text": "Tables and Images\nIn R Markdown, you can add tables and images using either Markdown syntax or R code.\n\nAdding tables:\n\nMarkdown syntax: You can create a simple table using pipes | and hyphens -. Here’s an example:\n\n| Column1 | Column2 | Column3 |\n|---------|---------|---------|\n| A       | B       | C       |\n| X       | Y       | Z       |\nThis will create a table with two rows and three columns.\n\nR code: You can create more complex tables using R packages like kable from the knitr package, or gt and flextable. Here’s an example using kable:\n\n```{r}\nlibrary(knitr)\n\ndata &lt;- data.frame(\n  Column1 = c(\"A\", \"X\"),\n  Column2 = c(\"B\", \"Y\"),\n  Column3 = c(\"C\", \"Z\")\n)\n\nkable(data, caption = \"An example table\")\n```\nThis will generate a table with the specified data and caption."
  },
  {
    "objectID": "modules/03-rstudio.html#adding-images",
    "href": "modules/03-rstudio.html#adding-images",
    "title": "RStudio",
    "section": "Adding images:",
    "text": "Adding images:\n\nMarkdown syntax: You can insert an image using the following syntax: ![alt text](path/to/image \"Optional title\"). Here’s an example:\n\n![Example image](path/to/image.jpg \"Optional title\")\nMake sure to replace path/to/image.jpg with the actual file path or URL of the image.\n\nR code: You can also add images using R code, especially if you’re generating images with R plots. Here’s two examples:\n\n```{r}\nplot(cars, main = \"An example plot\", xlab = \"Speed\", ylab = \"Distance\")\n```\n```{r schemat, echo = FALSE, out.width = “70%”, fig.align = “center”}\nknitr::include_graphics(“img/ncbi.png”)\n```\nThe benefit of the this code as opposed to Mardown (above) is that you the ability to change size and align"
  },
  {
    "objectID": "modules/03-rstudio.html#shiny-apps",
    "href": "modules/03-rstudio.html#shiny-apps",
    "title": "RStudio",
    "section": "Shiny Apps",
    "text": "Shiny Apps\nRStudio also provides a framework for building interactive web applications called Shiny apps. Shiny apps are built using R code and can be easily deployed on the web. They allow users to interact with data and visualizations in real-time, making it easy to explore and analyze complex data sets. Shiny apps are ideal for building dashboards, interactive reports, and other data-driven applications."
  },
  {
    "objectID": "modules/05-computers.html",
    "href": "modules/05-computers.html",
    "title": "Computing Resources",
    "section": "",
    "text": "Our lab has a number of different computing resources available for people to take advantage of."
  },
  {
    "objectID": "modules/05-computers.html#raven",
    "href": "modules/05-computers.html#raven",
    "title": "Computing Resources",
    "section": "Raven",
    "text": "Raven\nRaven is a Linux (Ubuntu 18.04LTS) computer with 48 CPUs, 256GB of RAM, and ~24TB of hard drive (HDD) storage."
  },
  {
    "objectID": "modules/05-computers.html#hyak",
    "href": "modules/05-computers.html#hyak",
    "title": "Computing Resources",
    "section": "Hyak",
    "text": "Hyak\nHyak is the Univ. of Washington’s high-performance computing (HPC) cluster. We have two Linux (RedHat CentOS) “nodes” (i.e. computers) available:\n\n28 CPUs, 128GB RAM\n28 CPUs, 512GB RAM"
  },
  {
    "objectID": "modules/05-computers.html#raven-1",
    "href": "modules/05-computers.html#raven-1",
    "title": "Computing Resources",
    "section": "Raven",
    "text": "Raven\n\nRStudio Server\nRead about why you should use RStudio Server.\n\nRequest Access to RStudio Server\n\nRequest RStudio Server access using the repo Issues. If you are not an existing UW employee/student, please provide a current email address.\n\nIf you already have a UW NetID, proceed to Step #3.\nIf you do not have a UW NetID, proceed to Step #2.\n\nIf you are not an existing UW employee/student, please provide Sam with a current email address. You will receive instructions from UW IT with instructions on how to register with UW and receive a UW NetID. Steven or Sam will notify you in the the repo Issue you created when you can proceed to Step 3.\nOnce you have a UW NetID, download and install Husky OnNet. This is a VPN service that provides access to computers hosted on the UW network.\nPost your UW Net ID in the repo Issue you created.\nSteven or Sam will send you a direct message in Slack with your RStudio Server login credentials.\n\n\n\n\nAccessing RStudio Server\n\nActivate Husky OnNet VPN service.\nPaste the following URL in your internet browser:\n\nhttp://raven.fish.washington.edu:8787\nIf you receive a notice from your browser regarding “insecure connection”, you may safely ignore this and proceed.\n\nUse login credentials provided by Steven or Sam.\nIf you encounter any issues, please create a new Issue. Please post screenshots and paste text of any error messages you encounter.\n\n\n\n\nAdministration Instructions\n\nSteven/Sam go here to sponsor UW NetID: https://uwnetid.washington.edu/sponsor/\nAfter acceptance by user, provision access to Husky OnNet with their UW NetID: https://provision.uw.edu/"
  },
  {
    "objectID": "modules/01-github.html",
    "href": "modules/01-github.html",
    "title": "GitHub",
    "section": "",
    "text": "GitHub is a web-based platform that provides hosting for software development and a set of tools for version control using Git. Created by Tom Preston-Werner, Chris Wanstrath, and PJ Hyett in 2008, GitHub has become one of the most popular platforms for developers to share code, collaborate on projects, and even showcase their portfolio.\n\n\n\n\nGitHub makes it extremely easy for multiple people to work on the same project. Features like forks, pull requests, and issues help facilitate effective collaboration.\n\n\n\nBuilt on Git, GitHub provides robust version control capabilities, allowing you to keep track of changes, revert to previous states, and work on different branches simultaneously.\n\n\n\nGitHub is not just for code. It’s widely used for documentation, thanks to support for Markdown and GitHub Pages which can turn repositories into full-fledged, static websites.\n\n\n\n\n\nRepositories: Central locations for storing all of your project’s files and revision history.\nCommits: Save changes to the repository.\ngit add .\ngit commit -m \"Your message here\"\nIssues: Report bugs, request features, and manage tasks in a project.\nActions: Automate tasks like building, testing, and deploying your code.\nGitHub Pages: Host websites directly from a GitHub repository.\n\n\n\n\n\n\nCommit messages should be concise and describe what was done and why. This makes it easier to review changes later.\n\n\n\nAlways include a README.md file to explain what your project is, how to set it up, and how to use it. Good documentation encourages collaboration.\n\n\n\nMake use of GitHub features like Projects, Milestones, and Labels to organize and track work on your repositories.\nBy adhering to these best practices, you can make the most out of GitHub’s myriad features for both personal and collaborative projects."
  },
  {
    "objectID": "modules/01-github.html#why-is-github-useful",
    "href": "modules/01-github.html#why-is-github-useful",
    "title": "GitHub",
    "section": "",
    "text": "GitHub makes it extremely easy for multiple people to work on the same project. Features like forks, pull requests, and issues help facilitate effective collaboration.\n\n\n\nBuilt on Git, GitHub provides robust version control capabilities, allowing you to keep track of changes, revert to previous states, and work on different branches simultaneously.\n\n\n\nGitHub is not just for code. It’s widely used for documentation, thanks to support for Markdown and GitHub Pages which can turn repositories into full-fledged, static websites."
  },
  {
    "objectID": "modules/01-github.html#key-github-features-and-examples",
    "href": "modules/01-github.html#key-github-features-and-examples",
    "title": "GitHub",
    "section": "",
    "text": "Repositories: Central locations for storing all of your project’s files and revision history.\nCommits: Save changes to the repository.\ngit add .\ngit commit -m \"Your message here\"\nIssues: Report bugs, request features, and manage tasks in a project.\nActions: Automate tasks like building, testing, and deploying your code.\nGitHub Pages: Host websites directly from a GitHub repository."
  },
  {
    "objectID": "modules/01-github.html#best-practices",
    "href": "modules/01-github.html#best-practices",
    "title": "GitHub",
    "section": "",
    "text": "Commit messages should be concise and describe what was done and why. This makes it easier to review changes later.\n\n\n\nAlways include a README.md file to explain what your project is, how to set it up, and how to use it. Good documentation encourages collaboration.\n\n\n\nMake use of GitHub features like Projects, Milestones, and Labels to organize and track work on your repositories.\nBy adhering to these best practices, you can make the most out of GitHub’s myriad features for both personal and collaborative projects."
  },
  {
    "objectID": "modules/02-bash.html",
    "href": "modules/02-bash.html",
    "title": "bash",
    "section": "",
    "text": "Bash, or the Bourne Again Shell, is a Unix shell and command-line interface for operating systems like Linux and macOS. Created by Brian Fox in 1989 as a free software replacement for the Bourne Shell, Bash is one of the most widely-used and powerful shells available. It serves as both a scripting language and an interactive command interpreter.\n\n\n\n\nBash scripts can automate repetitive tasks, making your workflow more efficient.\n\n\n\nBash is crucial for system administration tasks such as managing users, processes, and system updates.\n\n\n\nBash commands can be combined and executed in a variety of ways to perform complex tasks.\n\n\n\nBash scripts are usually portable across different Unix-based systems with little to no modification.\n\n\n\nBash can interact with other command-line tools and languages like awk, sed, and even Python, further extending its utility.\n\n\n\n\n\nCommands: The basic units of instruction in Bash.\nls  # List files\ncd directory/  # Change directory\nVariables: Store data that can be accessed and manipulated.\nNAME=\"John\"\necho $NAME\nControl Structures: If-else statements, loops, and case statements to control flow.\nif [ \"$a\" -eq \"$b\" ]; then\n    echo \"a is equal to b\"\nfi\nPipes and Redirection: Connect multiple commands and redirect output.\nls | grep '.txt'  # List only .txt files\necho \"Hello\" &gt; file.txt  # Write to file\nScripting: Combine all of the above to write complex scripts.\n#!/bin/bash\n# This is a simple script\necho \"Hello, world!\"\n\n\n\n\n\n\nAlways comment your scripts to explain what each part is doing. This is especially useful for more complex scripts.\n# This is a comment explaining the following line of code\nls\n\n\n\nChoose descriptive variable names to make your script more readable.\n# Good\nfile_count=10\n\n# Bad\nfc=10\n\n\n\nBash has many features, but that doesn’t mean you have to use them all. Stick to the simplest approach that gets the job done.\nBy following these best practices, you can write effective, robust, and maintainable Bash scripts, making the most of what this versatile tool has to offer."
  },
  {
    "objectID": "modules/02-bash.html#why-is-bash-useful",
    "href": "modules/02-bash.html#why-is-bash-useful",
    "title": "bash",
    "section": "",
    "text": "Bash scripts can automate repetitive tasks, making your workflow more efficient.\n\n\n\nBash is crucial for system administration tasks such as managing users, processes, and system updates.\n\n\n\nBash commands can be combined and executed in a variety of ways to perform complex tasks.\n\n\n\nBash scripts are usually portable across different Unix-based systems with little to no modification.\n\n\n\nBash can interact with other command-line tools and languages like awk, sed, and even Python, further extending its utility."
  },
  {
    "objectID": "modules/02-bash.html#key-bash-features-and-examples",
    "href": "modules/02-bash.html#key-bash-features-and-examples",
    "title": "bash",
    "section": "",
    "text": "Commands: The basic units of instruction in Bash.\nls  # List files\ncd directory/  # Change directory\nVariables: Store data that can be accessed and manipulated.\nNAME=\"John\"\necho $NAME\nControl Structures: If-else statements, loops, and case statements to control flow.\nif [ \"$a\" -eq \"$b\" ]; then\n    echo \"a is equal to b\"\nfi\nPipes and Redirection: Connect multiple commands and redirect output.\nls | grep '.txt'  # List only .txt files\necho \"Hello\" &gt; file.txt  # Write to file\nScripting: Combine all of the above to write complex scripts.\n#!/bin/bash\n# This is a simple script\necho \"Hello, world!\""
  },
  {
    "objectID": "modules/02-bash.html#best-practices",
    "href": "modules/02-bash.html#best-practices",
    "title": "bash",
    "section": "",
    "text": "Always comment your scripts to explain what each part is doing. This is especially useful for more complex scripts.\n# This is a comment explaining the following line of code\nls\n\n\n\nChoose descriptive variable names to make your script more readable.\n# Good\nfile_count=10\n\n# Bad\nfc=10\n\n\n\nBash has many features, but that doesn’t mean you have to use them all. Stick to the simplest approach that gets the job done.\nBy following these best practices, you can write effective, robust, and maintainable Bash scripts, making the most of what this versatile tool has to offer."
  },
  {
    "objectID": "modules/02-bash.html#ls",
    "href": "modules/02-bash.html#ls",
    "title": "bash",
    "section": "ls",
    "text": "ls\nLet’s see what’s in this directory by running ls, which stands for “listing”:\nls\ncreatures  molecules           pizza.cfg\ndata       north-pacific-gyre  solar.pdf\nDesktop    notes.txt           writing\n\nls prints the names of the files and directories in the current directory in alphabetical order, arranged neatly into columns. We can make its output more comprehensible by using the flag -F, which tells ls to add a trailing / to the names of directories:\nls -F\ncreatures/  molecules/           pizza.cfg\ndata/       north-pacific-gyre/  solar.pdf\nDesktop/    notes.txt            writing/\nHere, we can see that data-shell contains seven sub-directories. The names that don’t have trailing slashes, like notes.txt, pizza.cfg, and solar.pdf, are plain old files. And note that there is a space between ls and -F: without it, the shell thinks we’re trying to run a command called ls-F, which doesn’t exist."
  },
  {
    "objectID": "modules/02-bash.html#relative-path",
    "href": "modules/02-bash.html#relative-path",
    "title": "bash",
    "section": "relative path",
    "text": "relative path\nNow let’s take a look at what’s in data-shell directory by running ls -F data, i.e., the command ls with the arguments -F and data. The second argument — the one without a leading dash — tells ls that we want a listing of something other than our current working directory:\n ls -F data\namino-acids.txt  animal-counts/  animals.txt  elements/  morse.txt  pdb/  planets.txt  salmon.txt  sunspot.txt\nThe output shows us that there are four text files and two sub-sub-directories. Organizing things hierarchically in this way helps us keep track of our work: it’s possible to put hundreds of files in our home directory, just as it’s possible to pile hundreds of printed papers on our desk, but it’s a self-defeating strategy.\nNotice, by the way that we spelled the directory name data. It doesn’t have a trailing slash: that’s added to directory names by ls when we use the -F flag to help us tell things apart. And it doesn’t begin with a slash because it’s a relative path, i.e., it tells ls how to find something from where we are, rather than from the root of the file system."
  },
  {
    "objectID": "modules/02-bash.html#absolute-path",
    "href": "modules/02-bash.html#absolute-path",
    "title": "bash",
    "section": "absolute path",
    "text": "absolute path\nIf we run ls -F /data (with a leading slash) we get a different answer, because /data is an absolute path:\nls -F /data\nNote you will get an “No file” warning here. This is because we this directory does not exist.\nThe leading / tells the computer to follow the path from the root of the filesystem, so it always refers to exactly one directory, no matter where we are when we run the command.\nIf we wanted to use the **absolute path* to list out the contents of this directory we could used\nls -F /home/jovyan/data-shell/data/\nNote this would work no matter what our pwd is."
  },
  {
    "objectID": "modules/02-bash.html#nelles-pipeline-organizing-files",
    "href": "modules/02-bash.html#nelles-pipeline-organizing-files",
    "title": "bash",
    "section": "Nelle’s Pipeline: Organizing Files",
    "text": "Nelle’s Pipeline: Organizing Files\nKnowing just this much about files and directories, Nelle is ready to organize the files that the protein assay machine will create. First, she creates a directory called north-pacific-gyre (to remind herself where the data came from). Inside that, she creates a directory called 2012-07-03, which is the date she started processing the samples. She used to use names like conference-paper and revised-results, but she found them hard to understand after a couple of years. (The final straw was when she found herself creating a directory called revised-revised-results-3.)\n\nNelle names her directories “year-month-day”, with leading zeroes for months and days, because the shell displays file and directory names in alphabetical order. If she used month names, December would come before July; if she didn’t use leading zeroes, November (‘11’) would come before July (‘7’).\n\nEach of her physical samples is labelled according to her lab’s convention with a unique ten-character ID, such as “NENE01729A”. This is what she used in her collection log to record the location, time, depth, and other characteristics of the sample, so she decides to use it as part of each data file’s name. Since the assay machine’s output is plain text, she will call her files NENE01729A.txt, NENE01812A.txt, and so on. All 1520 files will go into the same directory.\nIf she is in her home directory, Nelle can see what files she has using the command:\nls north-pacific-gyre/2012-07-03/\nThis is a lot to type, but she can let the shell do most of the work. If she types:\nls nor\nand then presses tab, the shell automatically completes the directory name for her:\nls north-pacific-gyre/\nIf she presses tab again, Bash will add 2012-07-03/ to the command, since it’s the only possible completion. Pressing tab again does nothing, since there are 1520 possibilities; pressing tab twice brings up a list of all the files, and so on. This is called tab completion, and we will see it in many other tools as we go on."
  },
  {
    "objectID": "modules/02-bash.html#key-points",
    "href": "modules/02-bash.html#key-points",
    "title": "bash",
    "section": "Key Points",
    "text": "Key Points\n\nThe file system is responsible for managing information on the disk.\nInformation is stored in files, which are stored in directories (folders).\nDirectories can also store other directories, which forms a directory tree.\n/ on its own is the root directory of the whole filesystem.\nA relative path specifies a location starting from the current location.\nAn absolute path specifies a location from the root of the filesystem.\nDirectory names in a path are separated with / on Unix, but \\ on Windows.\n.. means “the directory above the current one”; . on its own means “the current directory”.\nMost files’ names are something.extension. The extension isn’t required, and doesn’t guarantee anything, but is normally used to indicate the type of data in the file.\nMost commands take options (flags) which begin with a -."
  },
  {
    "objectID": "modules/02-bash.html#word-count",
    "href": "modules/02-bash.html#word-count",
    "title": "bash",
    "section": "word count",
    "text": "word count\nLet’s go into that directory with cd and run the command wc *.pdb. wc is the “word count” command: it counts the number of lines, words, and characters in files. The * in *.pdb matches zero or more characters, so the shell turns *.pdb into a complete list of .pdb files:\ncd molecules\n$ wc *.pdb\n\n  20  156 1158 cubane.pdb\n  12   84  622 ethane.pdb\n   9   57  422 methane.pdb\n  30  246 1828 octane.pdb\n  21  165 1226 pentane.pdb\n  15  111  825 propane.pdb\n 107  819 6081 total\n\nWildcards\n* is a wildcard. It matches zero or more characters, so *.pdb matches ethane.pdb, propane.pdb, and so on. On the other hand, p*.pdb only matches pentane.pdb and propane.pdb, because the ‘p’ at the front only matches itself.\n? is also a wildcard, but it only matches a single character. This means that p?.pdb matches pi.pdb or p5.pdb, but not propane.pdb. We can use any number of wildcards at a time: for example, p*.p?* matches anything that starts with a ‘p’ and ends with ‘.’, ‘p’, and at least one more character (since the ‘?’ has to match one character, and the final * can match any number of characters). Thus, p*.p?* would match preferred.practice, and even p.pi (since the first * can match no characters at all), but not quality.practice (doesn’t start with ‘p’) or preferred.p (there isn’t at least one character after the ‘.p’).\nWhen the shell sees a wildcard, it expands the wildcard to create a list of matching filenames before running the command that was asked for. This means that commands like wc and ls never see the wildcard characters, just what those wildcards matched. This is another example of orthogonal design.\nIf we run wc -l instead of just wc, the output shows only the number of lines per file:\nwc -l *.pdb\n  20  cubane.pdb\n  12  ethane.pdb\n   9  methane.pdb\n  30  octane.pdb\n  21  pentane.pdb\n  15  propane.pdb\n 107  total\nWe can also use -w to get only the number of words, or -c to get only the number of characters."
  },
  {
    "objectID": "modules/02-bash.html#redirect",
    "href": "modules/02-bash.html#redirect",
    "title": "bash",
    "section": "redirect",
    "text": "redirect\nWhich of these files is shortest? It’s an easy question to answer when there are only six files, but what if there were 6000? Our first step toward a solution is to run the command:\nwc -l *.pdb &gt; lengths\nThe &gt; tells the shell to redirect the command’s output to a file instead of printing it to the screen. The shell will create the file if it doesn’t exist, or overwrite the contents of that file if it does. (This is why there is no screen output: everything that wc would have printed has gone into the file lengths instead.) ls lengths confirms that the file exists:\nls lengths\nlengths"
  },
  {
    "objectID": "modules/02-bash.html#cat",
    "href": "modules/02-bash.html#cat",
    "title": "bash",
    "section": "cat",
    "text": "cat\nWe can now send the content of lengths to the screen using cat lengths. cat stands for “concatenate”: it prints the contents of files one after another. There’s only one file in this case, so cat just shows us what it contains:\ncat lengths\n  20  cubane.pdb\n  12  ethane.pdb\n   9  methane.pdb\n  30  octane.pdb\n  21  pentane.pdb\n  15  propane.pdb\n 107  total"
  },
  {
    "objectID": "modules/02-bash.html#sort",
    "href": "modules/02-bash.html#sort",
    "title": "bash",
    "section": "sort",
    "text": "sort\nNow let’s use the sort command to sort its contents. We will also use the -n flag to specify that the sort is numerical instead of alphabetical. This does not change the file; instead, it sends the sorted result to the screen:\nsort -n lengths\n  9  methane.pdb\n 12  ethane.pdb\n 15  propane.pdb\n 20  cubane.pdb\n 21  pentane.pdb\n 30  octane.pdb\n107  total"
  },
  {
    "objectID": "modules/02-bash.html#head",
    "href": "modules/02-bash.html#head",
    "title": "bash",
    "section": "head",
    "text": "head\nWe can put the sorted list of lines in another temporary file called sorted-lengths by putting &gt; sorted-lengths after the command, just as we used &gt; lengths to put the output of wc into lengths. Once we’ve done that, we can run another command called head to get the first few lines in sorted-lengths:\nsort -n lengths &gt; sorted-lengths\nhead -1 sorted-lengths\n  9  methane.pdb\nUsing the parameter -1 with head tells it that we only want the first line of the file; -20 would get the first 20, and so on. Since sorted-lengths contains the lengths of our files ordered from least to greatest, the output of head must be the file with the fewest lines."
  },
  {
    "objectID": "modules/02-bash.html#pipe",
    "href": "modules/02-bash.html#pipe",
    "title": "bash",
    "section": "pipe",
    "text": "pipe\nIf you think this is confusing, you’re in good company: even once you understand what wc, sort, and head do, all those intermediate files make it hard to follow what’s going on. We can make it easier to understand by running sort and head together:\nsort -n lengths | head -1\n  9  methane.pdb\nThe vertical bar between the two commands is called a pipe. It tells the shell that we want to use the output of the command on the left as the input to the command on the right. The computer might create a temporary file if it needs to, or copy data from one program to the other in memory, or something else entirely; we don’t have to know or care.\nWe can use another pipe to send the output of wc directly to sort, which then sends its output to head:\nwc -l *.pdb | sort -n | head -1\n  9  methane.pdb\n\nHere’s what actually happens behind the scenes when we create a pipe. When a computer runs a program—any program—it creates a process in memory to hold the program’s software and its current state. Every process has an input channel called standard input. (By this point, you may be surprised that the name is so memorable, but don’t worry: most Unix programmers call it “stdin”. Every process also has a default output channel called standard output] (or “stdout”)\n\n\nThe shell is actually just another program. Under normal circumstances, whatever we type on the keyboard is sent to the shell on its standard input, and whatever it produces on standard output is displayed on our screen. When we tell the shell to run a program, it creates a new process and temporarily sends whatever we type on our keyboard to that process’s standard input, and whatever the process sends to standard output to the screen.\nHere’s what happens when we run wc -l *.pdb &gt; lengths. The shell starts by telling the computer to create a new process to run the wc program. Since we’ve provided some filenames as parameters, wc reads from them instead of from standard input. And since we’ve used &gt; to redirect output to a file, the shell connects the process’s standard output to that file.\nIf we run wc -l *.pdb | sort -n instead, the shell creates two processes (one for each process in the pipe) so that wc and sort run simultaneously. The standard output of wc is fed directly to the standard input of sort; since there’s no redirection with &gt;, sort’s output goes to the screen. And if we run wc -l *.pdb | sort -n | head -1, we get three processes with data flowing from the files, through wc to sort, and from sort through head to the screen.\nThis simple idea is why Unix has been so successful. Instead of creating enormous programs that try to do many different things, Unix programmers focus on creating lots of simple tools that each do one job well, and that work well with each other. This programming model is called pipes and filters. We’ve already seen pipes; a filter is a program like wc or sort that transforms a stream of input into a stream of output. Almost all of the standard Unix tools can work this way: unless told to do otherwise, they read from standard input, do something with what they’ve read, and write to standard output.\nThe key is that any program that reads lines of text from standard input and writes lines of text to standard output can be combined with every other program that behaves this way as well. You can and should write your programs this way so that you and other people can put those programs into pipes to multiply their power.\n\n\nRedirecting Input\nAs well as using &gt; to redirect a program’s output, we can use &lt; to redirect its input, i.e., to read from a file instead of from standard input. For example, instead of writing wc ammonia.pdb, we could write wc &lt; ammonia.pdb. In the first case, wc gets a command line parameter telling it what file to open. In the second, wc doesn’t have any command line parameters, so it reads from standard input, but we have told the shell to send the contents of ammonia.pdb to wc’s standard input."
  },
  {
    "objectID": "modules/04-blast.html",
    "href": "modules/04-blast.html",
    "title": "NCBI Blast",
    "section": "",
    "text": "/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in ../data/uniprot_sprot_r2023_01.fasta \\\n-dbtype prot \\\n-out ../blastdb/uniprot_sprot_r2023_01\n/home/shared/ncbi-blast-2.11.0+/bin/blastx \\\n-query ../data/Ab_4denovo_CLC6_a.fa \\\n-db ../blastdb/uniprot_sprot_r2023_01 \\\n-out ../output/Ab_4-uniprot_blastx.tab \\\n-evalue 1E-20 \\\n-num_threads 20 \\\n-max_target_seqs 1 \\\n-outfmt 6"
  },
  {
    "objectID": "modules/04-blast.html#database-creation",
    "href": "modules/04-blast.html#database-creation",
    "title": "NCBI Blast",
    "section": "Database Creation",
    "text": "Database Creation\n\nObtain Fasta (UniProt/Swiss-Prot)\nThis is from here picur reviewe sequences I named based on the identify of the database given\n\ncurrent_time &lt;- format(Sys.time(), \"%B %d, %Y %H:%M:%S\")\ncat(\"current date and time is \", current_time)\n\n\ncd ../data\ncurl -O https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\nmv uniprot_sprot.fasta.gz uniprot_sprot_r2023_04.fasta.gz\ngunzip -k uniprot_sprot_r2023_04.fasta.gz\n\n\n\nMaking the database\n\nmkdir ../blastdb\n/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in ../data/uniprot_sprot_r2023_01.fasta \\\n-dbtype prot \\\n-out ../blastdb/uniprot_sprot_r2023_01"
  },
  {
    "objectID": "modules/04-blast.html#getting-the-query-fasta-file",
    "href": "modules/04-blast.html#getting-the-query-fasta-file",
    "title": "NCBI Blast",
    "section": "Getting the query fasta file",
    "text": "Getting the query fasta file\n\ncurl https://eagle.fish.washington.edu/cnidarian/Ab_4denovo_CLC6_a.fa \\\n-k \\\n&gt; ../data/Ab_4denovo_CLC6_a.fa\n\nExploring what fasta file\n\nhead -3 ../data/Ab_4denovo_CLC6_a.fa\n\n\necho \"How many sequences are there?\"\ngrep -c \"&gt;\" ../data/Ab_4denovo_CLC6_a.fa\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"  # Replace with the name of your FASTA file\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Calculate sequence lengths\nsequence_lengths &lt;- width(sequences)\n\n# Create a data frame\nsequence_lengths_df &lt;- data.frame(Length = sequence_lengths)\n\n# Plot histogram using ggplot2\nggplot(sequence_lengths_df, aes(x = Length)) +\n  geom_histogram(binwidth = 1, color = \"grey\", fill = \"blue\", alpha = 0.75) +\n  labs(title = \"Histogram of Sequence Lengths\",\n       x = \"Sequence Length\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Calculate base composition\nbase_composition &lt;- alphabetFrequency(sequences, baseOnly = TRUE)\n\n# Convert to data frame and reshape for ggplot2\nbase_composition_df &lt;- as.data.frame(base_composition)\nbase_composition_df$ID &lt;- rownames(base_composition_df)\nbase_composition_melted &lt;- reshape2::melt(base_composition_df, id.vars = \"ID\", variable.name = \"Base\", value.name = \"Count\")\n\n# Plot base composition bar chart using ggplot2\nggplot(base_composition_melted, aes(x = Base, y = Count, fill = Base)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Base Composition\",\n       x = \"Base\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"A\" = \"green\", \"C\" = \"blue\", \"G\" = \"yellow\", \"T\" = \"red\"))\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Count CG motifs in each sequence\ncount_cg_motifs &lt;- function(sequence) {\n  cg_motif &lt;- \"CG\"\n  return(length(gregexpr(cg_motif, sequence, fixed = TRUE)[[1]]))\n}\n\ncg_motifs_counts &lt;- sapply(sequences, count_cg_motifs)\n\n# Create a data frame\ncg_motifs_counts_df &lt;- data.frame(CG_Count = cg_motifs_counts)\n\n# Plot CG motifs distribution using ggplot2\nggplot(cg_motifs_counts_df, aes(x = CG_Count)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\", alpha = 0.75) +\n  labs(title = \"Distribution of CG Motifs\",\n       x = \"Number of CG Motifs\",\n       y = \"Frequency\") +\n  theme_minimal()"
  },
  {
    "objectID": "modules/04-blast.html#running-blastx",
    "href": "modules/04-blast.html#running-blastx",
    "title": "NCBI Blast",
    "section": "Running Blastx",
    "text": "Running Blastx\n\n~/applications/ncbi-blast-2.13.0+/bin/blastx \\\n-query ../data/Ab_4denovo_CLC6_a.fa \\\n-db ../blastdb/uniprot_sprot_r2023_01 \\\n-out ../output/Ab_4-uniprot_blastx.tab \\\n-evalue 1E-20 \\\n-num_threads 20 \\\n-max_target_seqs 1 \\\n-outfmt 6\n\n\nhead -2 ../output/Ab_4-uniprot_blastx.tab\n\n\necho \"Number of lines in output\"\nwc -l ../output/Ab_4-uniprot_blastx.tab"
  },
  {
    "objectID": "modules/04-blast.html#joining-blast-table-with-annoations.",
    "href": "modules/04-blast.html#joining-blast-table-with-annoations.",
    "title": "NCBI Blast",
    "section": "Joining Blast table with annoations.",
    "text": "Joining Blast table with annoations.\n\nPrepping Blast table for easy join\n\ntr '|' '\\t' &lt; ../output/Ab_4-uniprot_blastx.tab \\\n&gt; ../output/Ab_4-uniprot_blastx_sep.tab\n\nhead -1 ../output/Ab_4-uniprot_blastx_sep.tab"
  },
  {
    "objectID": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "href": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "title": "NCBI Blast",
    "section": "Could do some cool stuff in R here reading in table",
    "text": "Could do some cool stuff in R here reading in table\n\nbltabl &lt;- read.csv(\"../output/Ab_4-uniprot_blastx_sep.tab\", sep = '\\t', header = FALSE)\n\nspgo &lt;- read.csv(\"https://gannet.fish.washington.edu/seashell/snaps/uniprot_table_r2023_01.tab\", sep = '\\t', header = TRUE)\n\n\ndatatable(head(bltabl), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(head(spgo), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n)\n\n\nannot_tab &lt;-\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n\n\n# Read dataset\ndataset &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')  # Replace with the path to your dataset\n\n# Select the column of interest\ncolumn_name &lt;- \"Organism\"  # Replace with the name of the column of interest\ncolumn_data &lt;- dataset[[column_name]]\n\n# Count the occurrences of the strings in the column\nstring_counts &lt;- table(column_data)\n\n# Convert to a data frame, sort by count, and select the top 10\nstring_counts_df &lt;- as.data.frame(string_counts)\ncolnames(string_counts_df) &lt;- c(\"String\", \"Count\")\nstring_counts_df &lt;- string_counts_df[order(string_counts_df$Count, decreasing = TRUE), ]\ntop_10_strings &lt;- head(string_counts_df, n = 10)\n\n# Plot the top 10 most common strings using ggplot2\nggplot(top_10_strings, aes(x = reorder(String, -Count), y = Count, fill = String)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Top 10 Species hits\",\n       x = column_name,\n       y = \"Count\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n\ndata &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')\n\n# Rename the `Gene.Ontology..biological.process.` column to `Biological_Process`\ncolnames(data)[colnames(data) == \"Gene.Ontology..biological.process.\"] &lt;- \"Biological_Process\"\n\n# Separate the `Biological_Process` column into individual biological processes\ndata_separated &lt;- unlist(strsplit(data$Biological_Process, split = \";\"))\n\n# Trim whitespace from the biological processes\ndata_separated &lt;- gsub(\"^\\\\s+|\\\\s+$\", \"\", data_separated)\n\n# Count the occurrences of each biological process\nprocess_counts &lt;- table(data_separated)\nprocess_counts &lt;- data.frame(Biological_Process = names(process_counts), Count = as.integer(process_counts))\nprocess_counts &lt;- process_counts[order(-process_counts$Count), ]\n\n# Select the 20 most predominant biological processes\ntop_20_processes &lt;- process_counts[1:20, ]\n\n# Create a color palette for the bars\nbar_colors &lt;- rainbow(nrow(top_20_processes))\n\n# Create a staggered vertical bar plot with different colors for each bar\nbarplot(top_20_processes$Count, names.arg = rep(\"\", nrow(top_20_processes)), col = bar_colors,\n        ylim = c(0, max(top_20_processes$Count) * 1.25),\n        main = \"Occurrences of the 20 Most Predominant Biological Processes\", xlab = \"Biological Process\", ylab = \"Count\")\n\n\n# Create a separate plot for the legend\npng(\"../output/GOlegend.png\", width = 800, height = 600)\npar(mar = c(0, 0, 0, 0))\nplot.new()\nlegend(\"center\", legend = top_20_processes$Biological_Process, fill = bar_colors, cex = 1, title = \"Biological Processes\")\ndev.off()\n\n\nknitr::include_graphics(\"../output/GOlegend.png\")"
  },
  {
    "objectID": "modules/04-blast.html#navigating-annotation",
    "href": "modules/04-blast.html#navigating-annotation",
    "title": "NCBI Blast",
    "section": "Navigating Annotation",
    "text": "Navigating Annotation\nThe following is a stepwise example or annotation of a gene set using UniProt::Swiss-Prot (reviewed) such that Gene Ontology terms can be associated with each gene.\nIn this following chunk where the fasta file is downloaded the release is noted and the file name is modified accordingly.\n\ncd DRAFT_Funct_Enrich/annot\n\ncurl -O https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\n\nmv uniprot_sprot.fasta.gz uniprot_sprot_r2023_02.fasta.gz\ngunzip -k uniprot_sprot_r2023_02.fasta.gz\n\nA protein blast database is then made.\n\n/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02.fasta \\\n-dbtype prot \\\n-out DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02\n\nIn a majority of cases you will want to annotate a gene set to get gene ontology information. If you are creating your own genome or transcriptome it should be rather straightforward to know what file to annotate. If using a widely studied system where there are publically available resources, it is advisable to use those as this is the best way to facilitate integration of data sets. In this case study we will be considering the Eastern oyster, (Crassostrea virginica) for which there is data at NCBI and Ensembl Metazoa. At NCBI there is both a GenBank and RefSeq assembly available.\nIn order to know which of the numerous fasta files should annotated with gene ontology information one should think downstream (or look to files already generated) to the identifiers in genesets that would be subject to functional enrichment tests.\nThe resulting fpkm count matrix for our case study is from an experiment where male and female oysters where exposed to low pH (and control) conditions. The count matrix is accessible here (csv). Hisat2/Stringtie was used to generate the count matrix with GCF_002022765.2_C_virginica-3.0_genomic.gff formatting thus responsible for gene naming. Specifically the naming format is as follows gene-LOC111099033,gene-LOC111099034,gene-LOC111099035.\nThe following fasta was selected for annotation: GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\ncd DRAFT_Funct_Enrich/annot\n\ncurl -O https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/022/765/GCF_002022765.2_C_virginica-3.0/GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\ngunzip -k GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\n\nhead -2 DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa\n\necho \"number of sequences\"\ngrep -c  \"&gt;\" DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa\n\n&gt;lcl|NC_035780.1_prot_XP_022327646.1_1 [gene=LOC111126949] [db_xref=GeneID:111126949] [protein=UNC5C-like protein] [protein_id=XP_022327646.1] [location=join(30535..31557,31736..31887,31977..32565,32959..33204)] [gbkey=CDS]\nMTEVCYIWASSSTTVVICGIFFIVWRCFISIKKRASPLHGSSQQVCQTCQIEGHDFGEFQLSCRRQNTNVGYDLQGRRSD\nThis protein fasta is used as query for blast of uniprot_sprot database.\n\n/home/shared/ncbi-blast-2.11.0+/bin/blastp \\\n-query DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa \\\n-db DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02 \\\n-out DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab \\\n-evalue 1E-20 \\\n-num_threads 40 \\\n-max_target_seqs 1 \\\n-outfmt 6\n\nHere is what the output file looks like, and at this point we want to get the UniProt Accession number for each gene\n\nhead -2 DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab\n\n\nblast &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab\", sep = '\\t', header = FALSE)\n\nConvert fasta to tab\n\nperl -e '$count=0; $len=0; while(&lt;&gt;) {s/\\r?\\n//; s/\\t/ /g; if (s/^&gt;//) { if ($. != 1) {print \"\\n\"} s/ |$/\\t/; $count++; $_ .= \"\\t\";} else {s/ //g; $len += length($_)} print $_;} print \"\\n\"; warn \"\\nConverted $count FASTA records in $. lines to tabular format\\nTotal sequence length: $len\\n\\n\";' \\\nDRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa &gt; DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\n\n\nhead -1 DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\n\n\ncdsftab &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\", sep = '\\t', header = FALSE, row.names=NULL)\n\nNow we can take the two data frames: A) blast output of taking protein fasta and comparing to uniprot_swiss-prot and B) a tabular version of same fasta file that has ID numbers of importance. Note this importance was determined based on what we want to use down stream.\n\ng.spid &lt;- left_join(blast, cdsftab, by = \"V1\") %&gt;%\n  mutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) %&gt;%\n  select(gene, V11, V2.x) %&gt;%\n  mutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) %&gt;%\n  distinct(gene, SPID, .keep_all = TRUE)\n\nLet’s break it down step by step:\n\ng.spid &lt;- left_join(blast, cdsftab, by = \"V1\") - This line is using the left_join() function from dplyr to merge the blast and cdsftab datasets by the column “V1”. A left join retains all the rows in the blast data frame and appends the matching rows in the cdsftab data frame. If there is no match, the result is NA. The result of this operation is assigned to the g.spid object.\nmutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) - This line is using the mutate() function from dplyr to add a new column called “gene” to the data frame. The new column is created by extracting substrings from the “V2.y” column based on the given regular expression pattern \"(?&lt;=\\\\[gene=)\\\\w+\". This regular expression matches and extracts any word (sequence of word characters, i.e., alphanumeric and underscore) that comes after “[gene=”.\nselect(gene, V11, V2.x) - This line is using the select() function from dplyr to keep only the specified columns (“gene”, “V11”, and “V2.x”) in the data frame.\nmutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) - Again, the mutate() function is used to add another new column named “SPID”. This column is created by extracting substrings from the “V2.x” column. The regular expression \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\" is designed to extract any character(s) that is/are surrounded by “|” (pipe symbol). This is a common format for delimited strings.\ndistinct(gene, SPID, .keep_all = TRUE) - This line is using the distinct() function from dplyr to remove duplicate rows based on the “gene” and “SPID” columns. The .keep_all = TRUE argument means that all other columns are also kept in the result, not just the “gene” and “SPID” columns.\n\nThe resulting g.spid data frame should have unique rows with respect to the “gene” and “SPID” columns, and it should contain these two new columns, “gene” and “SPID”, extracted from the original data based on specific string patterns.\nNow lets just write out SPIDs.\n\nleft_join(blast, cdsftab, by = \"V1\") %&gt;%\n  mutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) %&gt;%\n  select(gene, V11, V2.x) %&gt;%\n  mutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) %&gt;%\n  distinct(gene, SPID, .keep_all = TRUE) %&gt;%\n  select(SPID) %&gt;%\n  write.table(file = \"DRAFT_Funct_Enrich/annot/SPID.txt\", sep = \"\\t\", row.names = FALSE, quote = FALSE\n ) \n\nWith a list of matching Swiss-Prot IDs, (technically UniProt Accession number) we can go back to https://www.uniprot.org and grab corresponding GO terms. This can be done via a web or using Python API.\nUsing Web\nUsing ID Mapping\n\n\n\nid\n\n\n\n\n\nfinished\n\n\nNow will customize columns to get GO IDs.\n\n\n\ncustcol\n\n\n\nhead -2 DRAFT_Funct_Enrich/annot/uniprotGO.tab\n\nFinally we can join table to get “LOCIDs” the notation for our DEGs, with GO terms.\n\ngo &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/uniprotGO.tab\", sep = '\\t', header = TRUE, row.names=NULL)\n\n\nleft_join(g.spid, go, by = c(\"SPID\" = \"Entry\")) %&gt;%\n  select(gene,Gene.Ontology.IDs) %&gt;%\n  write.table(file = \"DRAFT_Funct_Enrich/annot/geneGO.txt\", sep = \"\\t\", row.names = FALSE, quote = FALSE\n  )\n\n\nhead DRAFT_Funct_Enrich/annot/geneGO.txt\n\nUsing API\n\npython3 DRAFT_Funct_Enrich/annot/uniprot-retrieval.py DRAFT_Funct_Enrich/annot/SPID.txt"
  }
]