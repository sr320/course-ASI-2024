[
  {
    "objectID": "modules/DRAFT_DNA_methylation.html",
    "href": "modules/DRAFT_DNA_methylation.html",
    "title": "DNA Methylation Assessment",
    "section": "",
    "text": "Thanks to advances in sample preparation and sequencing methods, there is an influx of research examining epigenomics in non-model systems. Broadly, epigenetics can be defined as changes to gene expression that do not arise from changes in the DNA sequence. DNA methylation, or addition of a methyl (CH3) group to a cytosine base adjacent to a guanine (CpG) is one of the more commonly studies epigenetic mechanisms, partly because of its environmental sensitivity and potential role in phenotypic plasticity. For a good review of epigenetic mechanisms including DNA methylation in marine organisms see Eirin-Lopez and Putnam (2019).\nThe purpose of this tutorial is to provide an example of aligning bisulfite-treated and enzymatically converted DNA sequence data to an existing genome, and discuss needs for potential downstream applications. The principle behind creating bisulfite-treated DNA libraries is that when cytosines are not methylated, then they will be converted to uracil, which ultimately result in thymine nucleotides in the sequence data. Wanamaker et al. (2022) offers a comparison of three methods for quantifying DNA methylation at single base-pair resolution using whole genome bisulfite sequencing (WGBS), reduced representation bisulfite sequencing (RRBS), and methyl-CpG binding domain bisulfite sequencing (MBDBS). When aligning bisulfite-converted data to a reference genome the percent methylation at a given CpG loci is determined by examining the ratio of thymines to cytosines. For example if there is a given cytosine adjacent to a guanine (ie CpG locus) with 30% of the reads containing thymine, one would consider this cytosine loci (CpG) to be 70% methylated. Since bisulfite treatment can damage DNA, newer library preparation and sequencing methods (ex. NEBNext® Enzymatic Methyl-seq Kit; EM-seq are starting to gain popularity. As EM-Seq produces loci-level data, alignment of EM-Seq data is similar to WGBS. Also, technologies like Nanopore and PacBio sequencing can directly detect DNA methylation without bisulfite conversion. See Dimond, Nguyen, and Roberts (2021) as example of using Nanopore sequencing. As DNA passes through a nanopore or is sequenced by single-molecule real-time (SMRT) technology, changes in electrical current or fluorescence patterns can indicate the presence of methylated bases.\n\n\n\n\n\nSample size is a critical factor when conducting DNA methylation analysis, particularly because of the significant variation in methylation patterns both between individuals and across different tissues. This variation, which is not yet fully understood, can significantly impact the outcomes and interpretations of methylation studies.\nWhen selecting samples for DNA methylation analysis, the key principle is that larger sample sizes generally provide more reliable and generalizable results. A larger number of samples allows for a more accurate representation of the population, accounting for individual and tissue-level differences. This is essential for identifying true biological patterns rather than artifacts of small, non-representative samples.\nHowever, the practicality of obtaining a large number of samples must be balanced with resource constraints. In this context, a sample size of around eight can be considered a decent starting point. This number is often sufficient to begin observing trends and patterns in methylation across individuals and tissues, providing a foundational understanding which can be built upon with further research.\nIt’s crucial to remember that while more samples can enhance the reliability of the results, the quality of the samples and the robustness of the methylation analysis techniques are equally important. Therefore, researchers must strive for a balance between quantity and quality in their sample selection to ensure meaningful and accurate insights into DNA methylation.\n\n\n\n\n\n\nBisulfite Conversion Efficiency is important to assess. One common step during library preparation us spiking library with Lambda phage DNA. Lambda phage DNA lacks cytosine methylation, making it an ideal control for bisulfite treatment. Here’s how it works and why it’s useful:\n\nBackground on Lambda Phage DNA: Lambda phage DNA is a widely used control in bisulfite sequencing because it is naturally unmethylated. By including this DNA in your sample, you create a known unmethylated reference.\nPreparation and Spiking: You prepare the lambda phage DNA and spike it into your DNA samples before bisulfite treatment. The proportion of lambda DNA added should be enough to be detected post-sequencing, but not so much that it overwhelms the sample. A typical proportion might be around 0.1% to 1% of the total DNA.\nBisulfite Treatment and Sequencing: After spiking, you proceed with bisulfite treatment and sequencing of the entire sample, which now includes your genomic DNA of interest and the spiked lambda DNA.\nAssessing Conversion Efficiency: Once sequencing is complete, you analyze the lambda phage DNA sequences. Since this DNA is unmethylated, all cytosines should be converted to thymines after bisulfite treatment and subsequent PCR. By calculating the percentage of cytosines that were successfully converted to thymines in the lambda DNA, you can determine the bisulfite conversion efficiency. An efficient conversion typically results in over 99% of cytosines being converted.\n\n\n\n\n\nFor a good review of epigenetic mechanisms including DNA methylation in marine organisms see Eirin-Lopez and Putnam (2019). Wanamaker et al. (2022) offers a comparison of three methods for quantifying DNA methylation at single base-pair resolution using whole genome bisulfite sequencing (WGBS), reduced representation bisulfite sequencing (RRBS), and methyl-CpG binding domain bisulfite sequencing (MBDBS). The tutorial below is based on WGBS, though the general workflow would be consistent.\nThe tutorial will cover the following:\n- Sequence quality assessment\n- Read alignment\n- Methylation quantification\n- File conversions\n- Potential downstream applications. Although this tutorial will not provide code for downstream applications such as differential methylation analysis, it will link to other open-access resources and examples.\nThe tutorial below is based on WGBS from a species of marine intertebrate (Montipora capitata coral) examined in Wanamaker et al. (2022), and all raw data can be accessed under NCBI Bioproject PRJNA691891 if you would like to follow the tutorial with this dataset. The general workflow would be consistent for other library preparation and sequencing methods that produce loci-level data. The tutorial indicates places where special analytical consideration should be given to other data types. Given the size of the data files and the computational resources necessary this is not developed to be actionable and reproducible. For context this process outlined below took weeks on a university HPC system."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#background",
    "href": "modules/DRAFT_DNA_methylation.html#background",
    "title": "DNA Methylation Assessment",
    "section": "",
    "text": "Thanks to advances in sample preparation and sequencing methods, there is an influx of research examining epigenomics in non-model systems. Broadly, epigenetics can be defined as changes to gene expression that do not arise from changes in the DNA sequence. DNA methylation, or addition of a methyl (CH3) group to a cytosine base adjacent to a guanine (CpG) is one of the more commonly studies epigenetic mechanisms, partly because of its environmental sensitivity and potential role in phenotypic plasticity. For a good review of epigenetic mechanisms including DNA methylation in marine organisms see Eirin-Lopez and Putnam (2019).\nThe purpose of this tutorial is to provide an example of aligning bisulfite-treated and enzymatically converted DNA sequence data to an existing genome, and discuss needs for potential downstream applications. The principle behind creating bisulfite-treated DNA libraries is that when cytosines are not methylated, then they will be converted to uracil, which ultimately result in thymine nucleotides in the sequence data. Wanamaker et al. (2022) offers a comparison of three methods for quantifying DNA methylation at single base-pair resolution using whole genome bisulfite sequencing (WGBS), reduced representation bisulfite sequencing (RRBS), and methyl-CpG binding domain bisulfite sequencing (MBDBS). When aligning bisulfite-converted data to a reference genome the percent methylation at a given CpG loci is determined by examining the ratio of thymines to cytosines. For example if there is a given cytosine adjacent to a guanine (ie CpG locus) with 30% of the reads containing thymine, one would consider this cytosine loci (CpG) to be 70% methylated. Since bisulfite treatment can damage DNA, newer library preparation and sequencing methods (ex. NEBNext® Enzymatic Methyl-seq Kit; EM-seq are starting to gain popularity. As EM-Seq produces loci-level data, alignment of EM-Seq data is similar to WGBS. Also, technologies like Nanopore and PacBio sequencing can directly detect DNA methylation without bisulfite conversion. See Dimond, Nguyen, and Roberts (2021) as example of using Nanopore sequencing. As DNA passes through a nanopore or is sequenced by single-molecule real-time (SMRT) technology, changes in electrical current or fluorescence patterns can indicate the presence of methylated bases."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#experimental-considerations",
    "href": "modules/DRAFT_DNA_methylation.html#experimental-considerations",
    "title": "DNA Methylation Assessment",
    "section": "",
    "text": "Sample size is a critical factor when conducting DNA methylation analysis, particularly because of the significant variation in methylation patterns both between individuals and across different tissues. This variation, which is not yet fully understood, can significantly impact the outcomes and interpretations of methylation studies.\nWhen selecting samples for DNA methylation analysis, the key principle is that larger sample sizes generally provide more reliable and generalizable results. A larger number of samples allows for a more accurate representation of the population, accounting for individual and tissue-level differences. This is essential for identifying true biological patterns rather than artifacts of small, non-representative samples.\nHowever, the practicality of obtaining a large number of samples must be balanced with resource constraints. In this context, a sample size of around eight can be considered a decent starting point. This number is often sufficient to begin observing trends and patterns in methylation across individuals and tissues, providing a foundational understanding which can be built upon with further research.\nIt’s crucial to remember that while more samples can enhance the reliability of the results, the quality of the samples and the robustness of the methylation analysis techniques are equally important. Therefore, researchers must strive for a balance between quantity and quality in their sample selection to ensure meaningful and accurate insights into DNA methylation.\n\n\n\n\n\n\nBisulfite Conversion Efficiency is important to assess. One common step during library preparation us spiking library with Lambda phage DNA. Lambda phage DNA lacks cytosine methylation, making it an ideal control for bisulfite treatment. Here’s how it works and why it’s useful:\n\nBackground on Lambda Phage DNA: Lambda phage DNA is a widely used control in bisulfite sequencing because it is naturally unmethylated. By including this DNA in your sample, you create a known unmethylated reference.\nPreparation and Spiking: You prepare the lambda phage DNA and spike it into your DNA samples before bisulfite treatment. The proportion of lambda DNA added should be enough to be detected post-sequencing, but not so much that it overwhelms the sample. A typical proportion might be around 0.1% to 1% of the total DNA.\nBisulfite Treatment and Sequencing: After spiking, you proceed with bisulfite treatment and sequencing of the entire sample, which now includes your genomic DNA of interest and the spiked lambda DNA.\nAssessing Conversion Efficiency: Once sequencing is complete, you analyze the lambda phage DNA sequences. Since this DNA is unmethylated, all cytosines should be converted to thymines after bisulfite treatment and subsequent PCR. By calculating the percentage of cytosines that were successfully converted to thymines in the lambda DNA, you can determine the bisulfite conversion efficiency. An efficient conversion typically results in over 99% of cytosines being converted."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#tutorial-details",
    "href": "modules/DRAFT_DNA_methylation.html#tutorial-details",
    "title": "DNA Methylation Assessment",
    "section": "",
    "text": "For a good review of epigenetic mechanisms including DNA methylation in marine organisms see Eirin-Lopez and Putnam (2019). Wanamaker et al. (2022) offers a comparison of three methods for quantifying DNA methylation at single base-pair resolution using whole genome bisulfite sequencing (WGBS), reduced representation bisulfite sequencing (RRBS), and methyl-CpG binding domain bisulfite sequencing (MBDBS). The tutorial below is based on WGBS, though the general workflow would be consistent.\nThe tutorial will cover the following:\n- Sequence quality assessment\n- Read alignment\n- Methylation quantification\n- File conversions\n- Potential downstream applications. Although this tutorial will not provide code for downstream applications such as differential methylation analysis, it will link to other open-access resources and examples.\nThe tutorial below is based on WGBS from a species of marine intertebrate (Montipora capitata coral) examined in Wanamaker et al. (2022), and all raw data can be accessed under NCBI Bioproject PRJNA691891 if you would like to follow the tutorial with this dataset. The general workflow would be consistent for other library preparation and sequencing methods that produce loci-level data. The tutorial indicates places where special analytical consideration should be given to other data types. Given the size of the data files and the computational resources necessary this is not developed to be actionable and reproducible. For context this process outlined below took weeks on a university HPC system."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#software-considerations",
    "href": "modules/DRAFT_DNA_methylation.html#software-considerations",
    "title": "DNA Methylation Assessment",
    "section": "Software Considerations",
    "text": "Software Considerations\nThe software used as part of this tutorial is Bismark Bisulfite Mapper Krueger and Andrews (2011), which is one of the more widely-used softwares to align methylation data to a reference genome. Another commonly-used options include bwa-meth Pedersen et al. (2014) and BSMAP Xi and Li (2009) (see Nunn et al. (2021) and (Gong et al. 2022) for comparisons of these software for plant and mammal species, respectively). As with any software it is best to be famililar with the User Manual.\nWithin Bismark, the tutorial uses Bowtie 2 Langmead and Salzberg (2012) as the alignment software. Although the Bismark user manual covers the necessary Bowtie 2 parameters, it may be useful to refer to the Bowtie 2 manual.\nThe content below will provided with the assumption that the reader has read the manual and is meant to serve as guidance based on experience working with marine invertebrates."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#genome-preparation",
    "href": "modules/DRAFT_DNA_methylation.html#genome-preparation",
    "title": "DNA Methylation Assessment",
    "section": "Genome Preparation",
    "text": "Genome Preparation\nThe first step in the process in preparing the reference genome by performing an in silico bisulfite conversion to allow Bowtie alignments. Example code:\n# Directories and programs\nbismark_dir=\"/programs/Bismark-0.21.0\"\nbowtie2_dir=\"/programs/bowtie2-2.3.4.1-linux-x86_64/\"\ngenome_folder=\"/where/the/fastafile/lives/\"\n\n${bismark_dir}/bismark_genome_preparation \\\n--verbose \\\n--parallel 28 \\\n--path_to_aligner ${bowtie2_dir} \\\n${genome_folder}\n\nBismark Genome Preparation Command:\n\n${bismark_dir}/bismark_genome_preparation: This is the command to run the genome preparation part of Bismark. The ${bismark_dir} variable is expanded to the path where Bismark is installed, so the script knows where to find the bismark_genome_preparation program.\n--verbose: This flag makes the program output more detailed information about what it is doing, which is helpful for debugging or understanding the process.\n--parallel 28: This option tells Bismark to use 28 threads in parallel to speed up the process. You can adjust this based on your computing power.\n--path_to_aligner ${bowtie2_dir}: This specifies the path to the aligner (Bowtie2) that Bismark will use. The ${bowtie2_dir} variable is expanded to the path where Bowtie2 is installed.\n${genome_folder}: Finally, this specifies the location of the genome files. The script uses the ${genome_folder} variable, which holds the path to these files.\n\n\nBismark will create two individual folders within this directory, one for a C-&gt;T converted genome and the other one for the G-&gt;A converted genome. After creating C-&gt;T and G-&gt;A versions of the genome they will be indexed in parallel usingthe indexer. Bismark will create the following subdirectories as outputs.\n./Bisulfite_Genome\n./Bisulfite_Genome/GA_conversion\n./Bisulfite_Genome/CT_conversion\nThis preparation step only needs to happen once for a given genome."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#aligning-reads",
    "href": "modules/DRAFT_DNA_methylation.html#aligning-reads",
    "title": "DNA Methylation Assessment",
    "section": "Aligning reads",
    "text": "Aligning reads\nOnce the genome is prepared, reads can be aligned. For aligning the trimmed reads to the genome the following code structure is used:\nfind ${reads_dir}*_R1_001_val_1.fq.gz \\\n| xargs basename -s _R1_001_val_1.fq.gz | xargs -I{} ${bismark_dir}/bismark \\\n--path_to_bowtie ${bowtie2_dir} \\\n-genome ${genome_folder} \\\n-p 4 \\\n-score_min L,0,-0.6 \\\n--non_directional \\\n-1 ${reads_dir}{}_R1_001_val_1.fq.gz \\\n-2 ${reads_dir}{}_R2_001_val_2.fq.gz \\\n-o Mcap_tg\nThis will create BAM files (sequence alignment files) and txt files (mapping reports). The reports contain information such as mapping efficiency.\nSpecifically this is what the code chunk does:\n\nFinding Files and Preparing Filenames:\n\nfind ${reads_dir}*_R1_001_val_1.fq.gz: This command uses the find utility to search for files in the directory specified by the variable reads_dir. The files it looks for have a naming pattern ending with _R1_001_val_1.fq.gz, which typically denotes the first file of a pair in paired-end sequencing data.\n| xargs basename -s _R1_001_val_1.fq.gz: The xargs command takes the list of files found and passes them to basename, which strips the suffix _R1_001_val_1.fq.gz from each filename. This step extracts the base name of each file, which is used to pair the R1 and R2 files correctly in the following steps.\n\nRunning Bismark for Sequence Alignment:\n\n| xargs -I{} ${bismark_dir}/bismark: The xargs command here is used to pass the base filenames to Bismark for alignment. {} is a placeholder for each base filename.\n--path_to_bowtie ${bowtie2_dir}: This option specifies the path to the Bowtie 2 aligner, which Bismark uses for the alignment process.\n-genome ${genome_folder}: Specifies the directory where the genome files, prepared in advance, are located.\n-p 4: Sets the number of processing threads to 4, allowing Bismark to perform the alignment in parallel, which can speed up the process. This parameter can be changed based on your computing power.\n-score_min L,0,-0.6: This sets the scoring threshold for alignments, impacting the sensitivity and specificity of the alignment. The default scoring threshold used by Bismark is L,0,-0.2.\n--non_directional: This flag indicates the sequencing data is non-directional, which is important for correctly interpreting the methylation status in bisulfite sequencing.\n-1 ${reads_dir}{}_R1_001_val_1.fq.gz -2 ${reads_dir}{}_R2_001_val_2.fq.gz: Specifies the files for paired-end reads. R1 and R2 files are paired based on their base filename.\n-o Mcap_tg: Sets the output directory for the alignment results to Mcap_tg.\n\n\n\nOptimizing alignment sensitivity\nThe code above uses score_min L,0,-0.6 as the scoring threshold for alignment sensitivity and specificity. This is different than the Bismark default, score_min L,0,-0.2. Reducing the sensitivity of the alignment can increase the percentage of reads aligned to the reference genome, but of course the quality of the alignment may decrease. A good practice is to align a subset of your data to the reference genome using different score_min parameters, then comparing mapping efficiency from the mapping reports. Generally, you want to choose a parameter that maximizes percent alignment and specificity. Example code\nfind ${reads_dir}*_R1_001_val_1.fq.gz \\\n| xargs basename -s _R1_001_val_1.fq.gz | xargs -I{} ${bismark_dir}/bismark \\\n--path_to_bowtie ${bowtie2_dir} \\\n-genome ${genome_folder} \\\n-p 4 \\\n- u 10000 \\\n-score_min L,0,-0.6 \\\n--non_directional \\\n-1 ${reads_dir}{}_R1_001_val_1.fq.gz \\\n-2 ${reads_dir}{}_R2_001_val_2.fq.gz \\\n-o Mcap_tg\nThis is the same code as above, except -u 10000 is used to run the alignment on a 10,000 bp subset of the data in each input file."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#deduplication",
    "href": "modules/DRAFT_DNA_methylation.html#deduplication",
    "title": "DNA Methylation Assessment",
    "section": "Deduplication",
    "text": "Deduplication\nFiles are then deduplicated if they are whole genome bisulfite treated samples. This command will deduplicate the Bismark alignment BAM file and remove all reads that align to the the very same position and in the same orientation except for one. This step is recommended for whole-genome bisulfite samples, but should not be used for reduced representation libraries such as RRBS, amplicon, or target enrichment libraries. The bismark manual provides additional information.\nfind *.bam | \\\nxargs basename -s .bam | \\\nxargs -I{} ${bismark_dir}/deduplicate_bismark \\\n--bam \\\n--paired \\\n{}.bam"
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#what-to-expect",
    "href": "modules/DRAFT_DNA_methylation.html#what-to-expect",
    "title": "DNA Methylation Assessment",
    "section": "What to expect",
    "text": "What to expect\nDNA methylation at CpG locus can vary to 0-100%. How methylated CpGs are across a genome can vary WIDELY depending on your focal taxa. Generally, invertebrate genomes are predominantly unmethylated, with smaller regions of higher methylation in a mosaic pattern. In some marine invertebrates we see ~15% methylation of CpGs (defined as &gt; 75% methylated) across the genome with most CpGs unmethylated. In these taxa methylation usually occurs in gene bodies.\nThe figure below shows the methylation ratio of CpGs across the Pacific oyster (Crassostrea gigas) genome, as well as the location of methylation across the genome:\n\n\n\n\n\nFrequency distribution of methylation ratios for CpG dinucleotides in oyster gill tissue. Gavery and Roberts (2013)\n\n\n\n\n\n\n\n\n\nScreenshot from IGV. Bedgraph files are displayed. See below for code to create these file (File Conversion)\n\n\n\n\n\nVertebrate genomes, on the other hand, have higher overall levels of methylation, with methylation occuring in CpG islands. An example analysis of methylation at individual CG dinucleotides in an elephant shark, mouse, and zebra fish is shown, below. Results reavel comparable levels of global methyaltion patterns with the majority of sites being highly methylated (≥ 80%), and fewer than one tenth being unmethylated (doi: 10.12688/f1000research.11281.1).\n\n\n\n\n\nGenome screenshots of methylation quantified in 2kb running windows over the first 3Mb of chromosome 1 zebrafish and mouse, and of the largest scaffold (NW_006890054.1) in elephant shark (doi: 10.12688/f1000research.11281.1)"
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#methylation-extraction",
    "href": "modules/DRAFT_DNA_methylation.html#methylation-extraction",
    "title": "DNA Methylation Assessment",
    "section": "Methylation extraction",
    "text": "Methylation extraction\nMethylation levels are then extracted using the bismark_methylation_extractor. For example:\n${bismark_dir}/bismark_methylation_extractor \\\n--bedGraph \\\n--counts \\\n--comprehensive \\\n--merge_non_CpG \\\n--multicore 28 \\\n--buffer_size 75% \\\n*deduplicated.bam\nThis particular command is used to extract and process methylation data from BAM files (generated after sequencing data alignment). Let’s break down the options:\n\nOptions:\n\n--bedGraph: Generates a BedGraph file output, which is a format that allows visualization of the methylation levels across the genome in genome browsers.\n--counts: Outputs the count of methylated and unmethylated calls for each cytosine in the genome.\n--comprehensive: This option makes the methylation extractor process all cytosines in the genome, not just those in a CpG context. It combines all three contexts (CpG, CHG, and CHH) into one output file.\n--merge_non_CpG: Merges the methylation information for CHG and CHH contexts (non-CpG) into a single file.\n--multicore 28: Specifies that the program should use 28 cores to process the data in parallel, which can significantly speed up the analysis. This can be adjusted depending on your computing power.\n--buffer_size 75%: This option sets the buffer size for reading in BAM files to 75% of the available system memory. It helps optimize the performance of the tool by adjusting how much memory is used for processing. This can be adjusted depending on your computing power.\n*deduplicated.bam: This is the input file pattern for the command. It indicates that the methylation extractor should process all BAM files in the current directory that have names ending with “deduplicated.bam”. These files are typically the output of a deduplication process applied to aligned bisulfite sequencing data.\n\n\nThis will create a file with the suffix deduplicated.bismark.cov.gz (example shown below in uncompressed format):\nNC_035784.1 141 141 37.5    3   5\nNC_035784.1 142 142 100 2   0\nNC_035784.1 155 155 70  7   3\nNC_035784.1 156 156 100 2   0\nNC_035784.1 291 291 0   0   2\nNC_035784.1 292 292 0   0   3\nNC_035784.1 313 313 0   0   1\nNC_035784.1 314 314 66.6666666666667    2   1\nNC_035784.1 470 470 66.6666666666667    4   2\nNC_035784.1 611 611 0   0   4\ncolumn organization of the file\n&lt;chromosome&gt; &lt;start position&gt; &lt;end position&gt; &lt;methylation percentage&gt; &lt;count methylated&gt; &lt;count unmethylated&gt;\nThe resultant bedGraph file contains information from unmerged strands, meaning reads aligning to forward and reverse strands in the same position are not combined. It is important to merge the reads from the forward and reserve strands for more accurate methylation quantification. A genome-wide cytosine report and merged bedGraph file are generated (including merged bedGraph file) from the deduplicated.bismark.cov.gz generated above in this example code:\nfind *deduplicated.bismark.cov.gz \\\n| xargs basename -s _trimmed_bismark_bt2.deduplicated.bismark.cov.gz \\\n| xargs -I{} ${bismark_dir}/coverage2cytosine \\\n--genome_folder ${genome_folder} \\\n-o {} \\\n--merge_CpG \\\n--zero_based \\\n{}_trimmed_bismark_bt2.deduplicated.bismark.cov.gz\nThe script converts coverage files into a format that details cytosine methylation levels across the genome. Here’s a breakdown of each step:\n\nFinding Files:\n\nfind *deduplicated.bismark.cov.gz: This command is used to search for all files in the current directory that end with deduplicated.bismark.cov.gz. These files are coverage files produced by Bismark, typically after aligning bisulfite-treated DNA sequences. They contain information about methylation at different sites in the genome.\n\nExtracting Base File Names:\n\n| xargs basename -s _trimmed_bismark_bt2.deduplicated.bismark.cov.gz: This pipeline uses xargs to pass each found file to basename, which strips the suffix _trimmed_bismark_bt2.deduplicated.bismark.cov.gz from each file name. This step extracts the base names of the files, which will be used to generate output filenames in the following steps.\n\nConverting Coverage to Cytosine Methylation Levels:\n\n| xargs -I{} ${bismark_dir}/coverage2cytosine: This pipeline uses xargs again to pass each base filename to the coverage2cytosine tool in the Bismark suite. The placeholder {} is replaced by the base filename.\n--genome_folder ${genome_folder}: This option specifies the location of the genome folder. The ${genome_folder} variable holds the path to this folder, which contains reference genome data necessary for the analysis.\n-o {}: The -o option specifies the output file name, using the base filename {} obtained from the previous steps.\n--merge_CpG: This flag instructs the program to merge the methylation information of cytosines in CpG context, providing a single methylation value for each CpG site.\n--zero_based: This option indicates that the output file should use zero-based coordinates, which is a common format in bioinformatics where the first base of a sequence is numbered 0 instead of 1.\n{}_trimmed_bismark_bt2.deduplicated.bismark.cov.gz: Finally, this specifies the input file for each iteration, where {} is replaced by the base filename obtained earlier. These are the coverage files previously identified by the find command.\n\n\nOutput file format .CpG_report.merged_CpG_evidence.cov (merged bedGraph file)\nNC_035785.1 217 219 100.000000  17  0\nNC_035785.1 523 525 87.500000   7   1\nNC_035785.1 556 558 50.000000   5   5\nNC_035785.1 727 729 100.000000  16  0\nNC_035785.1 1330    1332    0.000000    0   2\nNC_035785.1 1403    1405    0.000000    0   2\nNC_035785.1 1494    1496    66.666667   2   1\nNC_035785.1 1747    1749    100.000000  8   0\nNC_035785.1 2024    2026    100.000000  24  0\nNC_035785.1 2054    2056    93.333333   14  1\ncolumn organization of the file\n&lt;chromosome&gt; &lt;start position&gt; &lt;end position&gt; &lt;methylation percentage&gt; &lt;count methylated&gt; &lt;count unmethylated&gt;"
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#removing-c-to-t-c-t-snps",
    "href": "modules/DRAFT_DNA_methylation.html#removing-c-to-t-c-t-snps",
    "title": "DNA Methylation Assessment",
    "section": "Removing C to T (C->T) SNPs",
    "text": "Removing C to T (C-&gt;T) SNPs\nRemoving cytosine (C) to thymine (T) single nucleotide polymorphisms (SNPs) in bisulfite sequencing analysis could be something to consider for a few reasons:\n\nBisulfite Conversion Process: In bisulfite sequencing, unmethylated cytosines are converted to uracil, which is then read as thymine in sequencing. This conversion is key to identifying methylated cytosines. However, if a genomic DNA sequence naturally has a C to T (C-&gt;T) SNP, it can be falsely interpreted as a converted cytosine, leading to incorrect conclusions about methylation.\nReduction of False Positives: By removing C-&gt;T SNPs, one can reduce false positives in methylation analysis. Without removal, these SNPs might be misinterpreted as unmethylated cytosines that have undergone conversion, skewing the data towards an apparent increase in methylation.\nAccurate Methylation Mapping: For precise mapping of methylation patterns, it’s crucial to distinguish between true methylation signals and genetic variation (SNPs). Removing C-&gt;T SNPs allows for a more accurate representation of the methylation status of the genome.\nAnalysis Consistency: In comparative studies, where multiple samples or conditions are analyzed, removing C-&gt;T SNPs ensures consistency across samples. This is especially important in cases where SNP profiles may vary between samples, which could otherwise lead to inconsistent methylation data.\n\nBy eliminating these potential sources of error, researchers can have more confidence in their interpretation of the bisulfite sequencing data, leading to more reliable and valid conclusions about DNA methylation patterns.\nOne way to do this is using BS-Snper (Gao et al. (2015)). https://github.com/hellbelly/BS-Snper. This program finds SNPs in Bisulfite treated alignment files. The bash code below represents steps to identify SNPS and create a list of all C-&gt;T SNPS.\n\nsamtools merge \\\nPg_merged.bam \\\n*.sorted.bam\n\nperl /gscratch/srlab/programs/BS-Snper-master/BS-Snper.pl \\\nPg_merged.bam \\\n--fa Panopea-generosa-v1.0.fa \\\n--output snp.candidate.out \\\n--methcg meth.cg \\\n--methchg meth.chg \\\n--methchh meth.chh \\\n--minhetfreq 0.1 \\\n--minhomfreq 0.85 \\\n--minquali 15 \\\n--mincover 10 \\\n--maxcover 1000 \\\n--minread2 2 \\\n--errorate 0.02 \\\n--mapvalue 20 \\\n&gt;SNP.vcf 2&gt;SNP.log\n\n\ngrep $'C\\tG' output/SNP.vcf &gt; output/CT-SNP.vcf\nwc -l output/CT-SNP.vcf\n\nLet’s break down the command and its arguments:\n\nperl /gscratch/srlab/programs/BS-Snper-master/BS-Snper.pl: This part of the command calls the Perl interpreter to execute the BS-Snper.pl script. The script is located in the /gscratch/srlab/programs/BS-Snper-master/ directory.\nPg_merged.bam: This is the input file for the script, likely a BAM file (Binary Alignment/Map format) which contains alignment information of bisulfite-treated sequencing reads.\n--fa Panopea-generosa-v1.0.fa: This option specifies the reference genome file in FASTA format against which the BAM file will be compared.\n--output snp.candidate.out: This argument sets the name of the output file where the SNP candidates will be written.\n--methcg meth.cg, --methchg meth.chg, --methchh meth.chh: These options specify the output files for methylation analysis for CG, CHG, and CHH contexts, respectively (where H can be A, C, or T).\n--minhetfreq 0.1: Sets the minimum frequency for heterozygous bases to be considered in SNP calling (here, 10%).\n--minhomfreq 0.85: Sets the minimum frequency for homozygous bases to be considered in SNP calling (here, 85%).\n--minquali 15: Sets the minimum base quality score.\n--mincover 10, --maxcover 1000: These set the minimum and maximum coverage (number of reads) for a position to be considered in the analysis.\n--minread2 2: The minimum number of reads required to support a SNP candidate. It could be useful to use the same values for the minimum read threshold for SNP identification and for minimum coverage in the methylation data.\n--errorate 0.02: Sets the error rate of sequencing (here, 2%).\n--mapvalue 20: Specifies the mapping quality value, a threshold for considering reads in the analysis.\n&gt;SNP.vcf: Redirects the standard output to a file named SNP.vcf. This file will contain the SNP calls in VCF (Variant Call Format) format.\n2&gt;SNP.log: Redirects the standard error output to a file named SNP.log. This file will contain error messages and possibly additional log information.\n\nThe resulting could be used to mask the genome and the entire process described above could be repeated (ie Genome Preparation, Alignment, Quantification). An alternative and common practice is to remove cytosines from downstream analysis by removing loci in intermediate files (ie tab-delimited data files). Below is an example using antijoin to remove loci that correspond to CT SNPs from 5x coverage methyation quantification files.\n\n# Read in CT SNP file\nct &lt;- read.csv(\"../output/CT-SNP.vcf\", header = FALSE, sep = \"\\t\") %&gt;%\n  mutate(loci = paste0(V1, \"_\", V2))\n\n\n# 1. List all files with _5x.tab suffix\nfiles &lt;- list.files(path = \"../data/\", pattern = \"_5x.tab$\", full.names = TRUE)\n\n# 2. Iterate over each file\nfor(file in files) {\n  \n  # Extract base filename without the directory for naming purposes\n  base_name &lt;- basename(file)\n  \n  # Read the file\n  data &lt;- read.csv(file, header = FALSE, sep = \"\\t\")\n  \n  # Modify the data\n  modified_data &lt;- data %&gt;%\n    mutate(loci = paste0(V1, \"_\", V2)) %&gt;%\n    anti_join(ct, by = \"loci\") %&gt;%\n    select(-loci)\n    \n  \n  # Write the modified data to an output file\n  output_file &lt;- paste0(\"../output/f\", base_name)\n  write.table(modified_data, file = output_file, sep = \"\\t\", row.names = FALSE, quote = FALSE, col.names = FALSE)\n}\n\nLet’s break down what each part of the script does:\n\nReading in a CT SNP file:\n\nct &lt;- read.csv(\"../output/CT-SNP.vcf\", header = FALSE, sep = \"\\t\"): This line reads a file named CT-SNP.vcf from the specified directory. The file is expected to be in a tab-separated format (sep = \"\\t\"), and it doesn’t have a header row (header = FALSE).\nmutate(loci = paste0(V1, \"_\", V2)): The mutate function from the dplyr package is used to add a new column (loci) to the ct data frame. This column is created by concatenating the values in the first (V1) and second columns (V2) of each row, separated by an underscore.\n\nListing files with a specific suffix:\n\nfiles &lt;- list.files(path = \"../data/\", pattern = \"_5x.tab$\", full.names = TRUE): This line generates a list of file paths in the ../data/ directory. It only includes files that end with _5x.tab (as indicated by the pattern argument).\n\nProcessing each file:\n\nThe for(file in files) loop iterates over each file found in the previous step.\n\nbase_name &lt;- basename(file): Extracts the file name without the directory path.\ndata &lt;- read.csv(file, header = FALSE, sep = \"\\t\"): Reads the current file in the loop. Similar to the first read.csv call, it expects a tab-separated file with no header row.\nThe mutate and anti_join functions are used to modify data:\n\nmutate(loci = paste0(V1, \"_\", V2)): Adds a loci column similar to the ct data frame.\nanti_join(ct, by = \"loci\"): Removes rows from data that have matching loci values in the ct data frame.\nselect(-loci): Removes the loci column from the data.\n\nThe modified data is then written to an output file:\n\noutput_file &lt;- paste0(\"../output/f\", base_name): Constructs the output file path.\nwrite.table(modified_data, file = output_file, sep = \"\\t\", row.names = FALSE, quote = FALSE, col.names = FALSE): Writes the modified_data to the specified file. The output is tab-separated, and it doesn’t include row names, quotes, or column names."
  },
  {
    "objectID": "modules/DRAFT_DNA_methylation.html#downstream-application",
    "href": "modules/DRAFT_DNA_methylation.html#downstream-application",
    "title": "DNA Methylation Assessment",
    "section": "Downstream application",
    "text": "Downstream application\n\nIntegrating with population genetic data. example: Silliman et al. (2023)\nGene-level methylation analysis: example Putnam et al. (2022). It is worth considering the utility of converting loci-level resolution data to gene-level resolution data.\nDifferential loci methylation and/or region analyses. example: Venkataraman, White, and Roberts (2022). methylKit is a popular package to conduct this analysis differential methylation anlaysis\nFeature overlap. example: Venkataraman et al. (2020) Bedtools is excellent for quantitative assessment of feature overlap and IGV is good for visual assessment."
  },
  {
    "objectID": "modules/00-welcome.html",
    "href": "modules/00-welcome.html",
    "title": "Welcome",
    "section": "",
    "text": "There are few things to do beforehand if you have the time.\n\nComplete this pre-course survey\nGet a GitHub Account if you do not already have one."
  },
  {
    "objectID": "modules/00-welcome.html#pre-course-logistics",
    "href": "modules/00-welcome.html#pre-course-logistics",
    "title": "Welcome",
    "section": "",
    "text": "There are few things to do beforehand if you have the time.\n\nComplete this pre-course survey\nGet a GitHub Account if you do not already have one."
  },
  {
    "objectID": "modules/00-welcome.html#course-description",
    "href": "modules/00-welcome.html#course-description",
    "title": "Welcome",
    "section": "Course Description:",
    "text": "Course Description:\nThis one-week intensive graduate-level course explores the intriguing intersection of climate change, epigenetics, and marine invertebrate physiology, with a significant emphasis on the application of functional genomics. The course aims to highlight the substantial yet often overlooked role of marine invertebrates in coastal ecosystems, underlining their ecological significance and their responses to climate change at an epigenetic level.\nThe course starts by establishing a strong foundational understanding of epigenetics, climate change, and marine invertebrate physiology. Following this, students will delve into the intricate role of functional genomics in understanding these connections. Real-world examples will be extensively used to discuss how changes in climate directly and indirectly lead to alterations in the epigenetic mechanisms of various coastal marine invertebrates.\nBy the end of the course, students should have a comprehensive understanding of how climate change can influence the epigenetics and physiology of coastal marine invertebrates and the potential broader implications for marine ecosystems. The course is suitable for students with a basic understanding of genetics and climate science, although students from all disciplines are welcome as the course starts from foundational principles.\nThrough a mix of lectures, discussions, and interactive case studies, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology.\n\nObjectives:\nObjective 1: Understanding the Interplay between Climate Change, Epigenetics, and Marine Invertebrate Physiology\nThe first objective of the course is to help students gain a comprehensive understanding of how climate change impacts the physiological processes of marine invertebrates, especially through the lens of epigenetics. Students will learn about the fundamentals of marine invertebrate physiology and the various ways in which climate change-related stressors can influence these physiological systems, causing significant changes at an epigenetic level.\nObjective 2: Gaining Proficiency in Functional Genomics\nThe second objective is to ensure that students gain proficiency in the methodologies and applications of functional genomics, particularly in studying the epigenetic changes in marine invertebrates in response to climate change. Students will learn about various genomic techniques, their applications, and how to interpret data from these studies to gain insights into the epigenetic responses of marine invertebrates to climate stressors.\nObjective 3: Developing Skills for Analyzing and Evaluating Scientific Research\nThe third objective is to develop students’ ability to critically analyze and evaluate scientific literature in the field of marine invertebrate epigenetics and climate change. Through case studies and discussions on recent research, students will hone their skills in analyzing experimental designs, interpreting results, and understanding the broader implications of research findings for climate change adaptation and marine conservation efforts.\n\n\nContents:\nBasics of Epigenetics and Climate Change: This module provides an overview of climate change science and the principles of epigenetics. We discuss how the two fields intersect and introduce the concept of environmental epigenetics.\nPhysiology of Marine Invertebrates: This module focuses on the essential aspects of marine invertebrate physiology, covering topics such as feeding, digestion, reproduction, and response to environmental stressors.\nImpact of Climate Change on Marine Invertebrate Physiology: This section explores the specific impacts of various climate change-related factors, such as ocean acidification, temperature rise, and salinity changes on the physiology of marine invertebrates.\nFunctional Genomics and Epigenetics: This module delves into the methodologies and applications of functional genomics in studying epigenetic changes. Various genomic techniques such as DNA methylation analysis, chromatin immunoprecipitation, and RNA sequencing will be discussed.\nCase Studies and Current Research: The final module will involve an in-depth examination of recent research studies in the field. Students will be encouraged to critically analyze the studies and discuss the implications of the findings on our understanding of climate change impacts and the role of epigenetics in marine invertebrate adaptation."
  },
  {
    "objectID": "modules/00-welcome.html#methodology",
    "href": "modules/00-welcome.html#methodology",
    "title": "Welcome",
    "section": "Methodology:",
    "text": "Methodology:\nThrough a mix of lectures, discussions, and interactive data analysis, students will develop a nuanced understanding of the course topics. This course is highly recommended for students interested in marine biology, genetics, climate change, and conservation biology. The general format will be lecture in the morning and interactive data analysis in the afternoon. The latter will primarily involve using R and bash."
  },
  {
    "objectID": "modules/00-welcome.html#bibliography",
    "href": "modules/00-welcome.html#bibliography",
    "title": "Welcome",
    "section": "Bibliography:",
    "text": "Bibliography:\nCrandall, Grace, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma Timmins-Schiffman, and Steven Roberts. 2022. “Proteomic Response of Early Juvenile Pacific Oysters (Crassostrea Gigas) to Temperature.” PeerJ 10 (October): e14158. https://doi.org/10.7717/peerj.14158.\nCrandall, Grace, Pamela C. Jensen, Samuel J. White, and Steven Roberts. 2022. “Characterization of the Gene Repertoire and Environmentally Driven Expression Patterns in Tanner Crab (Chionoecetes Bairdi).” Marine Biotechnology 24 (1): 216–25. https://doi.org/10.1007/s10126–022–10100–8.\nDang, Xin, Yong-Kian Lim, Yang Li, Steven B. Roberts, Li Li, and Vengatesen Thiyagarajan. 2023. “Epigenetic-Associated Phenotypic Plasticity of the Ocean Acidification-Acclimated Edible Oyster in the Mariculture Environment.” Molecular Ecology 32 (2): 412–27. https://doi.org/10.1111/mec.16751.\nDimond, James L., and Steven B. Roberts. 2016. “Germline DNA Methylation in Reef Corals: Patterns and Potential Roles in Response to Environmental Change.” Molecular Ecology 25 (8): 1895–1904. https://doi.org/10.1111/mec.13414.\nEirin-Lopez, Jose M., and Hollie M. Putnam. 2019. “Marine Environmental Epigenetics.” Annual Review of Marine Science 11 (January): 335–68. https://doi.org/10.1146/annurev-marine–010318–095114.\nGallardo-Escárate, C., V. Valenzuela-Muñoz, S. Boltaña, G. Nuñez-Acuña, D. Valenzuela-Miranda, A. T. Gonçalves, C. Détrée, et al. 2017. “The Caligus Rogercresseyi miRNome: Discovery and Transcriptome Profiling during the Sea Lice Ontogeny.” Agri Gene 4 (June): 8–22. https://doi.org/10.1016/j.aggene.2017.03.002.\nGallardo-Escárate, Cristian, Gabriel Arriagada, Crisleri Carrera, Ana Teresa Gonçalves, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, and Valentina Valenzuela-Muñoz. 2019. “The Race between Host and Sea Lice in the Chilean Salmon Farming: A Genomic Approach.” Reviews in Aquaculture 11 (2): 325–39. https://doi.org/10.1111/raq.12334.\nGallardo-Escárate, Cristian, Valentina Valenzuela-Muñoz, Gustavo Nuñez-Acuña, Diego Valenzuela-Miranda, Fabian J. Tapia, Marco Yévenes, Gonzalo Gajardo, et al. 2023. “Chromosome-Level Genome Assembly of the Blue Mussel Mytilus Chilensis Reveals Molecular Signatures Facing the Marine Environment.” Genes 14 (4). https://doi.org/10.3390/genes14040876.\nGavery, Mackenzie R., and Steven B. Roberts. 2014. “A Context Dependent Role for DNA Methylation in Bivalves.” Briefings in Functional Genomics 13 (3): 217–22. https://doi.org/10.1093/bfgp/elt054.\nGurr, Samuel J., Shelly A. Trigg, Brent Vadopalas, Steven B. Roberts, and Hollie M. Putnam. 2022. “Acclimatory Gene Expression of Primed Clams Enhances Robustness to Elevated pCO2.” Molecular Ecology 31 (19): 5005–23. https://doi.org/10.1111/mec.16644.\nJuárez, Oscar E., Fabiola Lafarga-De la Cruz, Ignacio Leyva-Valencia, Edgar López-Landavery, Zaúl García-Esquivel, Fernando Díaz, Denisse Re-Araujo, Brent Vadopalas, and Clara E. Galindo-Sánchez. 2018. “Transcriptomic and Metabolic Response to Chronic and Acute Thermal Exposure of Juvenile Geoduck Clams Panopea Globosa.” Marine Genomics 42 (December): 1–13. https://doi.org/10.1016/j.margen.2018.09.003.\nNúñez-Acuña, Gustavo, Constanza Sáez-Vera, Diego Valenzuela-Miranda, Valentina Valenzuela-Muñoz, and Cristian Gallardo-Escárate. 2023. “Whole-Genome Resequencing in the Sea Louse Caligus Rogercresseyi Uncovers Gene Duplications and Copy Number Variants Associated with Pesticide Resistance.” Frontiers in Marine Science 10. https://doi.org/10.3389/fmars.2023.1112691.\nPutnam, Hollie M., Shelly A. Trigg, Samuel J. White, Laura H. Spencer, Brent Vadopalas, Aparna Natarajan, Jonathan Hetzel, et al. 2022. “Dynamic DNA Methylation Contributes to Carryover Effects and Beneficial Acclimatization in Geoduck Clams.” bioRxiv. https://doi.org/10.1101/2022.06.24.497506.\nRoberts, Steven B., and Mackenzie R. Gavery. 2012. “Is There a Relationship between DNA Methylation and Phenotypic Plasticity in Invertebrates?” Frontiers in Physiology 2 (January): 116. https://doi.org/10.3389/fphys.2011.00116.\nRoberts, Steven B., and Mackenzie R Gavery. 2017. “Epigenetic Considerations in Aquaculture.” PeerJ 5 (December): e4147. https://doi.org/10.7717/peerj.4147.\nSadler, Kirsten C. 2023. “Epigenetics across the Evolutionary Tree: New Paradigms from Non-Model Animals.” BioEssays: News and Reviews in Molecular, Cellular and Developmental Biology 45 (1): e2200036. https://doi.org/10.1002/bies.202200036.\nSilliman, Katherine, Laura H. Spencer, Samuel J. White, and Steven B. Roberts. 2023. “Epigenetic and Genetic Population Structure Is Coupled in a Marine Invertebrate.” Genome Biology and Evolution 15 (2). https://doi.org/10.1093/gbe/evad013.\nSpencer, Laura H., Erin Horkan, Ryan Crim, and Steven B. Roberts. 2021. “Latent Effects of Winter Warming on Olympia Oyster Reproduction and Larval Viability.” Journal of Experimental Marine Biology and Ecology 542–543 (September): 151604. https://doi.org/10.1016/j.jembe.2021.151604.\nSpencer, Laura H., Yaamini R. Venkataraman, Ryan Crim, Stuart Ryan, Micah J. Horwith, and Steven B. Roberts. 2020. “Carryover Effects of Temperature and pCO2 across Multiple Olympia Oyster Populations.” Ecological Applications: A Publication of the Ecological Society of America 30 (3): e02060. https://doi.org/10.1002/eap.2060.\nTimmins-Schiffman, Emma B., Grace A. Crandall, Brent Vadopalas, Michael E. Riffle, Brook L. Nunn, and Steven B. Roberts. 2017. “Integrating Discovery-Driven Proteomics and Selected Reaction Monitoring To Develop a Noninvasive Assay for Geoduck Reproductive Maturation.” Journal of Proteome Research 16 (9): 3298–3309. https://doi.org/10.1021/acs.jproteome.7b00288.\nTimmins-Schiffman, Emma, Samuel J. White, Rhonda Elliott Thompson, Brent Vadopalas, Benoit Eudeline, Brook L. Nunn, and Steven B. Roberts. 2021. “Coupled Microbiome Analyses Highlights Relative Functional Roles of Bacteria in a Bivalve Hatchery.” Environmental Microbiome 16 (1): 7. https://doi.org/10.1186/s40793–021–00376-z.\nTrigg, Shelly A., Yaamini R. Venkataraman, Mackenzie R. Gavery, Steven B. Roberts, Debashish Bhattacharya, Alan Downey-Wall, Jose M. Eirin-Lopez, et al. 2022. “Invertebrate Methylomes Provide Insight into Mechanisms of Environmental Tolerance and Reveal Methodological Biases.” Molecular Ecology Resources 22 (4): 1247–61. https://doi.org/10.1111/1755–0998.13542.\nValenzuela-Muñoz, Valentina, Juan Antonio Váldes, and Cristian Gallardo-Escárate. 2021. “Transcriptome Profiling of Long Non-Coding RNAs During the Atlantic Salmon Smoltification Process.” Marine Biotechnology 23 (2): 308–20. https://doi.org/10.1007/s10126–021–10024–9.\nVenkataraman, Yaamini R., Alan M. Downey-Wall, Justin Ries, Isaac Westfield, Samuel J. White, Steven B. Roberts, and Kathleen E. Lotterhos. 2020. “General DNA Methylation Patterns and Environmentally-Induced Differential Methylation in the Eastern Oyster (Crassostrea Virginica).” Frontiers in Marine Science 7. https://doi.org/10.3389/fmars.2020.00225.\nVenkataraman, Yaamini R., Samuel J. White, and Steven B. Roberts. 2022. “Differential DNA Methylation in Pacific Oyster Reproductive Tissue in Response to Ocean Acidification.” BMC Genomics 23 (1): 556. https://doi.org/10.1186/s12864–022–08781–5.\nWanamaker, Shelly A., Kaitlyn R. Mitchell, Rhonda Elliott Thompson, Benoit Eudeline, Brent Vadopalas, Emma B. Timmins-Schiffman, and Steven B. Roberts. 2020. “Temporal Proteomic Profiling Reveals Insight into Critical Developmental Processes and Temperature-Influenced Physiological Response Differences in a Bivalve Mollusc.” BMC Genomics 21 (1): 723. https://doi.org/10.1186/s12864–020–07127–3."
  },
  {
    "objectID": "modules/05-computers.html",
    "href": "modules/05-computers.html",
    "title": "Computing Resources",
    "section": "",
    "text": "Our lab has a number of different computing resources available for people to take advantage of."
  },
  {
    "objectID": "modules/05-computers.html#raven",
    "href": "modules/05-computers.html#raven",
    "title": "Computing Resources",
    "section": "Raven",
    "text": "Raven\nRaven is a Linux (Ubuntu 18.04LTS) computer with 48 CPUs, 256GB of RAM, and ~24TB of hard drive (HDD) storage."
  },
  {
    "objectID": "modules/05-computers.html#hyak",
    "href": "modules/05-computers.html#hyak",
    "title": "Computing Resources",
    "section": "Hyak",
    "text": "Hyak\nHyak is the Univ. of Washington’s high-performance computing (HPC) cluster. We have two Linux (RedHat CentOS) “nodes” (i.e. computers) available:\n\n28 CPUs, 128GB RAM\n28 CPUs, 512GB RAM"
  },
  {
    "objectID": "modules/05-computers.html#raven-1",
    "href": "modules/05-computers.html#raven-1",
    "title": "Computing Resources",
    "section": "Raven",
    "text": "Raven\n\nRStudio Server\nRead about why you should use RStudio Server.\n\nRequest Access to RStudio Server\n\nRequest RStudio Server access using the repo Issues. If you are not an existing UW employee/student, please provide a current email address.\n\nIf you already have a UW NetID, proceed to Step #3.\nIf you do not have a UW NetID, proceed to Step #2.\n\nIf you are not an existing UW employee/student, please provide Sam with a current email address. You will receive instructions from UW IT with instructions on how to register with UW and receive a UW NetID. Steven or Sam will notify you in the the repo Issue you created when you can proceed to Step 3.\nOnce you have a UW NetID, download and install Husky OnNet. This is a VPN service that provides access to computers hosted on the UW network.\nPost your UW Net ID in the repo Issue you created.\nSteven or Sam will send you a direct message in Slack with your RStudio Server login credentials.\n\n\n\n\nAccessing RStudio Server\n\nActivate Husky OnNet VPN service.\nPaste the following URL in your internet browser:\n\nhttp://raven.fish.washington.edu:8787\nIf you receive a notice from your browser regarding “insecure connection”, you may safely ignore this and proceed.\n\nUse login credentials provided by Steven or Sam.\nIf you encounter any issues, please create a new Issue. Please post screenshots and paste text of any error messages you encounter.\n\n\n\n\nAdministration Instructions\n\nSteven/Sam go here to sponsor UW NetID: https://uwnetid.washington.edu/sponsor/\nAfter acceptance by user, provision access to Husky OnNet with their UW NetID: https://provision.uw.edu/"
  },
  {
    "objectID": "modules/04-blast.html",
    "href": "modules/04-blast.html",
    "title": "NCBI Blast",
    "section": "",
    "text": "/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in ../data/uniprot_sprot_r2023_01.fasta \\\n-dbtype prot \\\n-out ../blastdb/uniprot_sprot_r2023_01\n/home/shared/ncbi-blast-2.11.0+/bin/blastx \\\n-query ../data/Ab_4denovo_CLC6_a.fa \\\n-db ../blastdb/uniprot_sprot_r2023_01 \\\n-out ../output/Ab_4-uniprot_blastx.tab \\\n-evalue 1E-20 \\\n-num_threads 20 \\\n-max_target_seqs 1 \\\n-outfmt 6"
  },
  {
    "objectID": "modules/04-blast.html#database-creation",
    "href": "modules/04-blast.html#database-creation",
    "title": "NCBI Blast",
    "section": "Database Creation",
    "text": "Database Creation\n\nObtain Fasta (UniProt/Swiss-Prot)\nThis is from here picur reviewe sequences I named based on the identify of the database given\n\ncurrent_time &lt;- format(Sys.time(), \"%B %d, %Y %H:%M:%S\")\ncat(\"current date and time is \", current_time)\n\n\ncd ../data\ncurl -O https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\nmv uniprot_sprot.fasta.gz uniprot_sprot_r2023_04.fasta.gz\ngunzip -k uniprot_sprot_r2023_04.fasta.gz\n\n\n\nMaking the database\n\nmkdir ../blastdb\n/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in ../data/uniprot_sprot_r2023_01.fasta \\\n-dbtype prot \\\n-out ../blastdb/uniprot_sprot_r2023_01"
  },
  {
    "objectID": "modules/04-blast.html#getting-the-query-fasta-file",
    "href": "modules/04-blast.html#getting-the-query-fasta-file",
    "title": "NCBI Blast",
    "section": "Getting the query fasta file",
    "text": "Getting the query fasta file\n\ncurl https://eagle.fish.washington.edu/cnidarian/Ab_4denovo_CLC6_a.fa \\\n-k \\\n&gt; ../data/Ab_4denovo_CLC6_a.fa\n\nExploring what fasta file\n\nhead -3 ../data/Ab_4denovo_CLC6_a.fa\n\n\necho \"How many sequences are there?\"\ngrep -c \"&gt;\" ../data/Ab_4denovo_CLC6_a.fa\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"  # Replace with the name of your FASTA file\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Calculate sequence lengths\nsequence_lengths &lt;- width(sequences)\n\n# Create a data frame\nsequence_lengths_df &lt;- data.frame(Length = sequence_lengths)\n\n# Plot histogram using ggplot2\nggplot(sequence_lengths_df, aes(x = Length)) +\n  geom_histogram(binwidth = 1, color = \"grey\", fill = \"blue\", alpha = 0.75) +\n  labs(title = \"Histogram of Sequence Lengths\",\n       x = \"Sequence Length\",\n       y = \"Frequency\") +\n  theme_minimal()\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Calculate base composition\nbase_composition &lt;- alphabetFrequency(sequences, baseOnly = TRUE)\n\n# Convert to data frame and reshape for ggplot2\nbase_composition_df &lt;- as.data.frame(base_composition)\nbase_composition_df$ID &lt;- rownames(base_composition_df)\nbase_composition_melted &lt;- reshape2::melt(base_composition_df, id.vars = \"ID\", variable.name = \"Base\", value.name = \"Count\")\n\n# Plot base composition bar chart using ggplot2\nggplot(base_composition_melted, aes(x = Base, y = Count, fill = Base)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Base Composition\",\n       x = \"Base\",\n       y = \"Count\") +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"A\" = \"green\", \"C\" = \"blue\", \"G\" = \"yellow\", \"T\" = \"red\"))\n\n\n# Read FASTA file\nfasta_file &lt;- \"../data/Ab_4denovo_CLC6_a.fa\"\nsequences &lt;- readDNAStringSet(fasta_file)\n\n# Count CG motifs in each sequence\ncount_cg_motifs &lt;- function(sequence) {\n  cg_motif &lt;- \"CG\"\n  return(length(gregexpr(cg_motif, sequence, fixed = TRUE)[[1]]))\n}\n\ncg_motifs_counts &lt;- sapply(sequences, count_cg_motifs)\n\n# Create a data frame\ncg_motifs_counts_df &lt;- data.frame(CG_Count = cg_motifs_counts)\n\n# Plot CG motifs distribution using ggplot2\nggplot(cg_motifs_counts_df, aes(x = CG_Count)) +\n  geom_histogram(binwidth = 1, color = \"black\", fill = \"blue\", alpha = 0.75) +\n  labs(title = \"Distribution of CG Motifs\",\n       x = \"Number of CG Motifs\",\n       y = \"Frequency\") +\n  theme_minimal()"
  },
  {
    "objectID": "modules/04-blast.html#running-blastx",
    "href": "modules/04-blast.html#running-blastx",
    "title": "NCBI Blast",
    "section": "Running Blastx",
    "text": "Running Blastx\n\n~/applications/ncbi-blast-2.13.0+/bin/blastx \\\n-query ../data/Ab_4denovo_CLC6_a.fa \\\n-db ../blastdb/uniprot_sprot_r2023_01 \\\n-out ../output/Ab_4-uniprot_blastx.tab \\\n-evalue 1E-20 \\\n-num_threads 20 \\\n-max_target_seqs 1 \\\n-outfmt 6\n\n\nhead -2 ../output/Ab_4-uniprot_blastx.tab\n\n\necho \"Number of lines in output\"\nwc -l ../output/Ab_4-uniprot_blastx.tab"
  },
  {
    "objectID": "modules/04-blast.html#joining-blast-table-with-annoations.",
    "href": "modules/04-blast.html#joining-blast-table-with-annoations.",
    "title": "NCBI Blast",
    "section": "Joining Blast table with annoations.",
    "text": "Joining Blast table with annoations.\n\nPrepping Blast table for easy join\n\ntr '|' '\\t' &lt; ../output/Ab_4-uniprot_blastx.tab \\\n&gt; ../output/Ab_4-uniprot_blastx_sep.tab\n\nhead -1 ../output/Ab_4-uniprot_blastx_sep.tab"
  },
  {
    "objectID": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "href": "modules/04-blast.html#could-do-some-cool-stuff-in-r-here-reading-in-table",
    "title": "NCBI Blast",
    "section": "Could do some cool stuff in R here reading in table",
    "text": "Could do some cool stuff in R here reading in table\n\nbltabl &lt;- read.csv(\"../output/Ab_4-uniprot_blastx_sep.tab\", sep = '\\t', header = FALSE)\n\nspgo &lt;- read.csv(\"https://gannet.fish.washington.edu/seashell/snaps/uniprot_table_r2023_01.tab\", sep = '\\t', header = TRUE)\n\n\ndatatable(head(bltabl), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(head(spgo), options = list(scrollX = TRUE, scrollY = \"400px\", scrollCollapse = TRUE, paging = FALSE))\n\n\ndatatable(\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n)\n\n\nannot_tab &lt;-\n  left_join(bltabl, spgo,  by = c(\"V3\" = \"Entry\")) %&gt;%\n  select(V1, V3, V13, Protein.names, Organism, Gene.Ontology..biological.process., Gene.Ontology.IDs) %&gt;% mutate(V1 = str_replace_all(V1, \n            pattern = \"solid0078_20110412_FRAG_BC_WHITE_WHITE_F3_QV_SE_trimmed\", replacement = \"Ab\"))\n\n\n# Read dataset\ndataset &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')  # Replace with the path to your dataset\n\n# Select the column of interest\ncolumn_name &lt;- \"Organism\"  # Replace with the name of the column of interest\ncolumn_data &lt;- dataset[[column_name]]\n\n# Count the occurrences of the strings in the column\nstring_counts &lt;- table(column_data)\n\n# Convert to a data frame, sort by count, and select the top 10\nstring_counts_df &lt;- as.data.frame(string_counts)\ncolnames(string_counts_df) &lt;- c(\"String\", \"Count\")\nstring_counts_df &lt;- string_counts_df[order(string_counts_df$Count, decreasing = TRUE), ]\ntop_10_strings &lt;- head(string_counts_df, n = 10)\n\n# Plot the top 10 most common strings using ggplot2\nggplot(top_10_strings, aes(x = reorder(String, -Count), y = Count, fill = String)) +\n  geom_bar(stat = \"identity\", position = \"dodge\", color = \"black\") +\n  labs(title = \"Top 10 Species hits\",\n       x = column_name,\n       y = \"Count\") +\n  theme_minimal() +\n  theme(legend.position = \"none\") +\n  coord_flip()\n\n\ndata &lt;- read.csv(\"../output/blast_annot_go.tab\", sep = '\\t')\n\n# Rename the `Gene.Ontology..biological.process.` column to `Biological_Process`\ncolnames(data)[colnames(data) == \"Gene.Ontology..biological.process.\"] &lt;- \"Biological_Process\"\n\n# Separate the `Biological_Process` column into individual biological processes\ndata_separated &lt;- unlist(strsplit(data$Biological_Process, split = \";\"))\n\n# Trim whitespace from the biological processes\ndata_separated &lt;- gsub(\"^\\\\s+|\\\\s+$\", \"\", data_separated)\n\n# Count the occurrences of each biological process\nprocess_counts &lt;- table(data_separated)\nprocess_counts &lt;- data.frame(Biological_Process = names(process_counts), Count = as.integer(process_counts))\nprocess_counts &lt;- process_counts[order(-process_counts$Count), ]\n\n# Select the 20 most predominant biological processes\ntop_20_processes &lt;- process_counts[1:20, ]\n\n# Create a color palette for the bars\nbar_colors &lt;- rainbow(nrow(top_20_processes))\n\n# Create a staggered vertical bar plot with different colors for each bar\nbarplot(top_20_processes$Count, names.arg = rep(\"\", nrow(top_20_processes)), col = bar_colors,\n        ylim = c(0, max(top_20_processes$Count) * 1.25),\n        main = \"Occurrences of the 20 Most Predominant Biological Processes\", xlab = \"Biological Process\", ylab = \"Count\")\n\n\n# Create a separate plot for the legend\npng(\"../output/GOlegend.png\", width = 800, height = 600)\npar(mar = c(0, 0, 0, 0))\nplot.new()\nlegend(\"center\", legend = top_20_processes$Biological_Process, fill = bar_colors, cex = 1, title = \"Biological Processes\")\ndev.off()\n\n\nknitr::include_graphics(\"../output/GOlegend.png\")"
  },
  {
    "objectID": "modules/04-blast.html#navigating-annotation",
    "href": "modules/04-blast.html#navigating-annotation",
    "title": "NCBI Blast",
    "section": "Navigating Annotation",
    "text": "Navigating Annotation\nThe following is a stepwise example or annotation of a gene set using UniProt::Swiss-Prot (reviewed) such that Gene Ontology terms can be associated with each gene.\nIn this following chunk where the fasta file is downloaded the release is noted and the file name is modified accordingly.\n\ncd DRAFT_Funct_Enrich/annot\n\ncurl -O https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\n\nmv uniprot_sprot.fasta.gz uniprot_sprot_r2023_02.fasta.gz\ngunzip -k uniprot_sprot_r2023_02.fasta.gz\n\nA protein blast database is then made.\n\n/home/shared/ncbi-blast-2.11.0+/bin/makeblastdb \\\n-in DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02.fasta \\\n-dbtype prot \\\n-out DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02\n\nIn a majority of cases you will want to annotate a gene set to get gene ontology information. If you are creating your own genome or transcriptome it should be rather straightforward to know what file to annotate. If using a widely studied system where there are publically available resources, it is advisable to use those as this is the best way to facilitate integration of data sets. In this case study we will be considering the Eastern oyster, (Crassostrea virginica) for which there is data at NCBI and Ensembl Metazoa. At NCBI there is both a GenBank and RefSeq assembly available.\nIn order to know which of the numerous fasta files should annotated with gene ontology information one should think downstream (or look to files already generated) to the identifiers in genesets that would be subject to functional enrichment tests.\nThe resulting fpkm count matrix for our case study is from an experiment where male and female oysters where exposed to low pH (and control) conditions. The count matrix is accessible here (csv). Hisat2/Stringtie was used to generate the count matrix with GCF_002022765.2_C_virginica-3.0_genomic.gff formatting thus responsible for gene naming. Specifically the naming format is as follows gene-LOC111099033,gene-LOC111099034,gene-LOC111099035.\nThe following fasta was selected for annotation: GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\ncd DRAFT_Funct_Enrich/annot\n\ncurl -O https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/022/765/GCF_002022765.2_C_virginica-3.0/GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\ngunzip -k GCF_002022765.2_C_virginica-3.0_translated_cds.faa.gz\n\n\nhead -2 DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa\n\necho \"number of sequences\"\ngrep -c  \"&gt;\" DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa\n\n&gt;lcl|NC_035780.1_prot_XP_022327646.1_1 [gene=LOC111126949] [db_xref=GeneID:111126949] [protein=UNC5C-like protein] [protein_id=XP_022327646.1] [location=join(30535..31557,31736..31887,31977..32565,32959..33204)] [gbkey=CDS]\nMTEVCYIWASSSTTVVICGIFFIVWRCFISIKKRASPLHGSSQQVCQTCQIEGHDFGEFQLSCRRQNTNVGYDLQGRRSD\nThis protein fasta is used as query for blast of uniprot_sprot database.\n\n/home/shared/ncbi-blast-2.11.0+/bin/blastp \\\n-query DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa \\\n-db DRAFT_Funct_Enrich/annot/uniprot_sprot_r2023_02 \\\n-out DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab \\\n-evalue 1E-20 \\\n-num_threads 40 \\\n-max_target_seqs 1 \\\n-outfmt 6\n\nHere is what the output file looks like, and at this point we want to get the UniProt Accession number for each gene\n\nhead -2 DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab\n\n\nblast &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/Cvir_transcds-uniprot_blastp.tab\", sep = '\\t', header = FALSE)\n\nConvert fasta to tab\n\nperl -e '$count=0; $len=0; while(&lt;&gt;) {s/\\r?\\n//; s/\\t/ /g; if (s/^&gt;//) { if ($. != 1) {print \"\\n\"} s/ |$/\\t/; $count++; $_ .= \"\\t\";} else {s/ //g; $len += length($_)} print $_;} print \"\\n\"; warn \"\\nConverted $count FASTA records in $. lines to tabular format\\nTotal sequence length: $len\\n\\n\";' \\\nDRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.faa &gt; DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\n\n\nhead -1 DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\n\n\ncdsftab &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/GCF_002022765.2_C_virginica-3.0_translated_cds.tab\", sep = '\\t', header = FALSE, row.names=NULL)\n\nNow we can take the two data frames: A) blast output of taking protein fasta and comparing to uniprot_swiss-prot and B) a tabular version of same fasta file that has ID numbers of importance. Note this importance was determined based on what we want to use down stream.\n\ng.spid &lt;- left_join(blast, cdsftab, by = \"V1\") %&gt;%\n  mutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) %&gt;%\n  select(gene, V11, V2.x) %&gt;%\n  mutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) %&gt;%\n  distinct(gene, SPID, .keep_all = TRUE)\n\nLet’s break it down step by step:\n\ng.spid &lt;- left_join(blast, cdsftab, by = \"V1\") - This line is using the left_join() function from dplyr to merge the blast and cdsftab datasets by the column “V1”. A left join retains all the rows in the blast data frame and appends the matching rows in the cdsftab data frame. If there is no match, the result is NA. The result of this operation is assigned to the g.spid object.\nmutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) - This line is using the mutate() function from dplyr to add a new column called “gene” to the data frame. The new column is created by extracting substrings from the “V2.y” column based on the given regular expression pattern \"(?&lt;=\\\\[gene=)\\\\w+\". This regular expression matches and extracts any word (sequence of word characters, i.e., alphanumeric and underscore) that comes after “[gene=”.\nselect(gene, V11, V2.x) - This line is using the select() function from dplyr to keep only the specified columns (“gene”, “V11”, and “V2.x”) in the data frame.\nmutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) - Again, the mutate() function is used to add another new column named “SPID”. This column is created by extracting substrings from the “V2.x” column. The regular expression \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\" is designed to extract any character(s) that is/are surrounded by “|” (pipe symbol). This is a common format for delimited strings.\ndistinct(gene, SPID, .keep_all = TRUE) - This line is using the distinct() function from dplyr to remove duplicate rows based on the “gene” and “SPID” columns. The .keep_all = TRUE argument means that all other columns are also kept in the result, not just the “gene” and “SPID” columns.\n\nThe resulting g.spid data frame should have unique rows with respect to the “gene” and “SPID” columns, and it should contain these two new columns, “gene” and “SPID”, extracted from the original data based on specific string patterns.\nNow lets just write out SPIDs.\n\nleft_join(blast, cdsftab, by = \"V1\") %&gt;%\n  mutate(gene = str_extract(V2.y, \"(?&lt;=\\\\[gene=)\\\\w+\")) %&gt;%\n  select(gene, V11, V2.x) %&gt;%\n  mutate(SPID = str_extract(V2.x, \"(?&lt;=\\\\|)[^\\\\|]*(?=\\\\|)\")) %&gt;%\n  distinct(gene, SPID, .keep_all = TRUE) %&gt;%\n  select(SPID) %&gt;%\n  write.table(file = \"DRAFT_Funct_Enrich/annot/SPID.txt\", sep = \"\\t\", row.names = FALSE, quote = FALSE\n ) \n\nWith a list of matching Swiss-Prot IDs, (technically UniProt Accession number) we can go back to https://www.uniprot.org and grab corresponding GO terms. This can be done via a web or using Python API.\nUsing Web\nUsing ID Mapping\n\n\n\nid\n\n\n\n\n\nfinished\n\n\nNow will customize columns to get GO IDs.\n\n\n\ncustcol\n\n\n\nhead -2 DRAFT_Funct_Enrich/annot/uniprotGO.tab\n\nFinally we can join table to get “LOCIDs” the notation for our DEGs, with GO terms.\n\ngo &lt;- read.csv(\"DRAFT_Funct_Enrich/annot/uniprotGO.tab\", sep = '\\t', header = TRUE, row.names=NULL)\n\n\nleft_join(g.spid, go, by = c(\"SPID\" = \"Entry\")) %&gt;%\n  select(gene,Gene.Ontology.IDs) %&gt;%\n  write.table(file = \"DRAFT_Funct_Enrich/annot/geneGO.txt\", sep = \"\\t\", row.names = FALSE, quote = FALSE\n  )\n\n\nhead DRAFT_Funct_Enrich/annot/geneGO.txt\n\nUsing API\n\npython3 DRAFT_Funct_Enrich/annot/uniprot-retrieval.py DRAFT_Funct_Enrich/annot/SPID.txt"
  }
]